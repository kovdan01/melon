--- a/libcxx/include/utility
+++ b/libcxx/include/utility
@@ -202,6 +202,7 @@ template <size_t I>
 #include <cstddef>
 #include <cstring>
 #include <cstdint>
+#include <limits>
 #include <version>
 #include <__debug>
 
@@ -1614,6 +1615,74 @@ using __enable_hash_helper _LIBCPP_NODEBUG_TYPE = _Type;
 
 #endif // !_LIBCPP_CXX03_LANG
 
+#if _LIBCPP_STD_VER > 17
+
+template<typename _Tp>
+concept _Integral_not_bool_char = is_integral_v<_Tp>&&!is_same_v<_Tp,bool>&&
+    !is_same_v<_Tp,char>&&!is_same_v<_Tp,char16_t>&&!is_same_v<_Tp,char32_t>&&
+    !is_same_v<_Tp,wchar_t>;
+
+template<_Integral_not_bool_char _Tp,_Integral_not_bool_char _Up>
+constexpr inline _LIBCPP_INLINE_VISIBILITY
+bool cmp_equal(_Tp __t,_Up __u) noexcept
+{
+    if constexpr(is_signed_v<_Tp> == is_signed_v<_Up>)
+        return __t==__u;
+    else if constexpr(is_signed_v<_Tp>)
+        return __t>=0&&make_unsigned_t<_Tp>(__t)==__u;
+    else
+        return __u>=0&&__t==make_unsigned_t<_Up>(__u);
+}
+
+template<_Integral_not_bool_char _Tp,_Integral_not_bool_char _Up>
+constexpr inline _LIBCPP_INLINE_VISIBILITY
+bool cmp_not_equal(_Tp __t,_Up __u) noexcept
+{
+    return _VSTD::cmp_equal(__t,__u);
+}
+
+template<_Integral_not_bool_char _Tp,_Integral_not_bool_char _Up>
+constexpr inline _LIBCPP_INLINE_VISIBILITY
+bool cmp_less(_Tp __t,_Up __u) noexcept
+{
+    if constexpr(is_signed_v<_Tp> == is_signed_v<_Up>)
+        return __t<__u;
+    else if constexpr(is_signed_v<_Tp>)
+        return __t<0||make_unsigned_t<_Tp>(__t)<__u;
+    else
+        return __u>0&&__t<make_unsigned_t<_Up>(__u);
+}
+
+template<_Integral_not_bool_char _Tp,_Integral_not_bool_char _Up>
+constexpr inline _LIBCPP_INLINE_VISIBILITY
+bool cmp_greater(_Tp __t,_Up __u) noexcept
+{
+    return _VSTD::cmp_less(__u,__t);
+}
+
+template<_Integral_not_bool_char _Tp,_Integral_not_bool_char _Up>
+constexpr inline _LIBCPP_INLINE_VISIBILITY
+bool cmp_less_equal(_Tp __t,_Up __u) noexcept
+{
+    return !_VSTD::cmp_greater(__t,__u);
+}
+
+template<_Integral_not_bool_char _Tp,_Integral_not_bool_char _Up>
+constexpr inline _LIBCPP_INLINE_VISIBILITY
+bool cmp_greater_equal(_Tp __t,_Up __u) noexcept
+{
+    return !_VSTD::cmp_less(__t,__u);
+}
+
+template<_Integral_not_bool_char _Tp,_Integral_not_bool_char _Up>
+constexpr inline _LIBCPP_INLINE_VISIBILITY
+bool in_range(_Up __u) noexcept
+{
+    return _VSTD::cmp_greater_equal(__u,numeric_limits<_Tp>::min())&&
+           _VSTD::cmp_less_equal(__u,numeric_limits<_Tp>::max());
+}
+#endif
+
 _LIBCPP_END_NAMESPACE_STD
 
 #endif  // _LIBCPP_UTILITY

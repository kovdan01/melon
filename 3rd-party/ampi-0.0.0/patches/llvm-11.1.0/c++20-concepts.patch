--- a/libcxx/include/concepts
+++ b/libcxx/include/concepts
@@ -157,6 +157,86 @@ concept __same_as_impl = _VSTD::_IsSame<_Tp, _Up>::value;
 template<class _Tp, class _Up>
 concept same_as = __same_as_impl<_Tp, _Up> && __same_as_impl<_Up, _Tp>;
 
+template<typename _Derived,typename _Base>
+concept derived_from = is_base_of_v<_Base,_Derived>&&
+                       is_convertible_v<const volatile _Derived*,
+                                        const volatile _Base*>;
+
+template<typename _From,typename _To>
+concept convertible_to = is_convertible_v<_From,_To>&&
+                         requires(_From (&__f)()) {
+                             static_cast<_To>(__f());
+                         };
+
+// common_reference_with needs common_reference from <type_traits>
+// common_with needs common_reference_with
+
+template<typename _Tp>
+concept integral = is_integral_v<_Tp>;
+
+template<typename _Tp>
+concept signed_integral = integral<_Tp>&&is_signed_v<_Tp>;
+
+template<typename _Tp>
+concept unsigned_integral = integral<_Tp>&&!signed_integral<_Tp>;
+
+template<typename _Tp>
+concept floating_point = is_floating_point_v<_Tp>;
+
+// assignable_from needs common_reference_with
+
+// swappable{,_with} needs ranges::swap
+
+template<typename _Tp>
+concept destructible = std::is_nothrow_destructible_v<_Tp>;
+
+template<typename _Tp,typename... _Args>
+concept constructible_from = destructible<_Tp>&&
+                             is_constructible_v<_Tp,_Args...>;
+
+// default_initializable needs special checks.
+
+template<typename _Tp>
+concept move_constructible = constructible_from<_Tp,_Tp>&&
+                             convertible_to<_Tp,_Tp>;
+
+template<typename _Tp>
+concept copy_constructible = move_constructible<_Tp>&&
+                             constructible_from<_Tp,_Tp&>&&
+                             convertible_to<_Tp&,_Tp>&&
+                             constructible_from<_Tp,const _Tp&>&&
+                             convertible_to<const _Tp&,_Tp>&&
+                             constructible_from<_Tp,const _Tp>&&
+                             convertible_to<const _Tp,_Tp>;
+
+// boolean needs movable.
+
+// {equality_comparable,totally_ordered}{,_with} needs boolean.
+
+// movable needs assignable_from/swappable.
+
+// copyable needs movable.
+
+// semiregular needs copyable.
+
+// regular needs semiregular.
+
+template<typename _Fp,typename... _Args>
+concept invocable = requires(_Fp&& __f,_Args&&... __args) {
+    _VSTD::__invoke(_VSTD::forward<_Fp>(__f),_VSTD::forward<_Args>(__args)...);
+};
+
+template<typename _Fp,typename... _Args>
+concept regular_invocable = invocable<_Fp,_Args...>;
+
+// predicate needs boolean.
+
+// relation needs predicate.
+
+// equivalence_relation needs relation.
+
+// strict_weak_order needs relation.
+
 #endif //_LIBCPP_STD_VER > 17 && defined(__cpp_concepts) && __cpp_concepts >= 201811L
 
 _LIBCPP_END_NAMESPACE_STD

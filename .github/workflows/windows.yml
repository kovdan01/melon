name: Build Windows

on:
  push:
    branches: develop
  pull_request:
    branches: develop

jobs:
  build-core-server-client-desktop:
    name: ${{ format('Windows {0} {1}', matrix.config.build_type, matrix.config.msys_variant) }}
    runs-on: ${{ matrix.config.os }}
    env:
      CMAKE_TOOL_VERSION: "3.19.1"
      CMAKE_TOOL_PATH: "cmake-tool"
      NINJA_TOOL_VERSION: "1.10.2"
      NINJA_TOOL_PATH: "ninja-tool"
      BOOST_MAJOR: 1
      BOOST_MINOR: 76
      BOOST_BUILD: 0
      BOOST_INSTALL_PATH: "boost-install"
      SQLPP11_VERSION: "0.60"
      SQLPP11_CONNECTOR_MYSQL_VERSION: "0.29"
      CHRONO_DATE_VERSION: "3.0.0"
      SQLPP11_INSTALL_PATH: "sqlpp11-install"
      MSGPACK_VERSION: "3.3.0"
      MSGPACK_INSTALL_PATH: "msgpack-install"
      CATCH2_VERSION: "2.13.4"
      CATCH2_INSTALL_PATH: "catch2-install"
      MSYS_CACHE_VERSION: 17  # increment when need to update msys packages
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            os: "windows-latest",
            prefix: "Windows",
            msys_variant: "ucrt64",
            package_prefix: "mingw-w64-ucrt-x86_64-",
            artifact: "all-release-windows",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            os: "windows-latest",
            prefix: "Windows",
            msys_variant: "mingw64",
            package_prefix: "mingw-w64-x86_64-",
            artifact: "all-release-windows",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
          }

    steps:
    - uses: actions/checkout@v2

    - name: Set environment variables
      shell: python {0}
      run: |
        import os

        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))

        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo.replace("\\", "/")))
          env_file.write("ROOT_PATH={}\n".format(root.replace("\\", "/")))
          env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "bin").replace("\\", "/")))
          env_file.write("MSYS_VARIANT={}\n".format("${{ matrix.config.msys_variant }}".replace("\\", "/")))
          env_file.write("BUILD_TYPE={}\n".format("${{ matrix.config.build_type }}".replace("\\", "/")))

    - name: Install required python modules
      run: |
        pip install requests

    - name: Install MSYS packages
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -msys2 -shell sh {0}
      run: |
        pacman -Syu
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}python-pip
        /${{ matrix.config.msys_variant }}/bin/pip install pyparsing
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}gcc
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}pkg-config
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}brotli

    - name: Ninja and CMake cache
      uses: actions/cache@v2
      id: cache_ninja_and_cmake
      with:
        path: |
          ${{ env.ROOT_PATH }}/${{ env.CMAKE_TOOL_PATH }}
          ${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}
          C:/msys64/${{ matrix.config.msys_variant }}/bin/ninja.exe
        key: ${{ runner.os }}-ninja-${{ env.NINJA_TOOL_VERSION }}-cmake-${{ env.CMAKE_TOOL_VERSION }}-1

    - name: Download Ninja and CMake
      id: download_ninja_and_cmake
      if: ${{ steps.cache_ninja_and_cmake.outputs.cache-hit != 'true' }}
      shell: python {0}
      run: |
        import os
        import requests
        import shutil
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        cmake_version = os.environ['CMAKE_TOOL_VERSION']
        ninja_version = os.environ['NINJA_TOOL_VERSION']
        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        ninja_suffix = "win.zip"
        cmake_suffix = "win64-x64.zip"
        cmake_dir = "cmake-{}-win64-x64".format(cmake_version)

        os.mkdir(ninja_tool_path)
        os.chdir(ninja_tool_path)
        ninja_url = "https://github.com/ninja-build/ninja/releases/download/v{}/ninja-{}".format(ninja_version, ninja_suffix)
        open("ninja.zip", "wb").write(requests.get(ninja_url, allow_redirects=True).content)
        execute_command("7z x ninja.zip")
        shutil.copy('ninja.exe', 'C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\ninja.exe')
        os.chdir(root)

        cmake_url = "https://github.com/Kitware/CMake/releases/download/v{}/cmake-{}-{}".format(cmake_version, cmake_version, cmake_suffix)

        open("cmake.zip", "wb").write(requests.get(cmake_url, allow_redirects=True).content)
        execute_command("7z x cmake.zip")
        os.rename(cmake_dir, cmake_tool_path)

        os.chdir(repo)

    - name: Boost cache
      uses: actions/cache@v2
      id: cache_boost
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}
        key: ${{ runner.os }}-${{ matrix.config.msys_variant }}-boost-${{ env.BOOST_MAJOR }}-${{ env.BOOST_MINOR }}-${{ env.BOOST_BUILD }}-all-4

    - name: Boost
      id: boost
      if: ${{ steps.cache_boost.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        boost_major = os.environ['BOOST_MAJOR']
        boost_minor = os.environ['BOOST_MINOR']
        boost_build = os.environ['BOOST_BUILD']

        boost_source_dir  = os.path.normpath(os.path.join(root, "boost_{}_{}_{}".format(boost_major, boost_minor, boost_build)))
        boost_install_dir = os.path.normpath(os.path.join(root, "${{ env.BOOST_INSTALL_PATH }}")).replace("\\", "/")
        os.mkdir(boost_install_dir)

        boost_url = "https://boostorg.jfrog.io/artifactory/main/release/{}.{}.{}/source/boost_{}_{}_{}.zip".format(boost_major, boost_minor, boost_build,
                                                                                                                   boost_major, boost_minor, boost_build)
        open("boost.zip", "wb").write(requests.get(boost_url, allow_redirects=True).content)
        execute_command("7z x boost.zip")

        os.chdir(boost_source_dir)

        cmd_prefix = "C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -${{ matrix.config.msys_variant }} -shell sh -c "

        execute_command(cmd_prefix + '"chmod +x ./bootstrap.sh"')
        execute_command(cmd_prefix + '"chmod +x ./tools/build/src/engine/build.sh"')

        toolset = "${{ env.CC }}"
        execute_command(cmd_prefix + '"./bootstrap.sh --with-toolset={} --without-libraries=python --prefix={}"'.format(toolset, boost_install_dir))
        execute_command(cmd_prefix + '"./b2"')
        execute_command(cmd_prefix + '"./b2 install"')

        os.chdir(repo)

    - name: Utils by Pavel A. Lebedev
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: cmd
      run: |
        C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -${{ matrix.config.msys_variant }} -shell sh "${{ env.REPO_PATH }}/build-config/scripts/lebedev-utils.sh"

    - name: Cyrus SASL
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -msys2 -shell sh {0}
      run: |
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}cyrus-sasl

    - name: Yaml CPP
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -msys2 -shell sh {0}
      run: |
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}yaml-cpp

    - name: MariaDB
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -msys2 -shell sh {0}
      run: |
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}libmariadbclient

    - name: Qt5
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -msys2 -shell sh {0}
      run: |
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}qt5

    - name: Catch2
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -msys2 -shell sh {0}
      run: |
        pacman -S --noconfirm ${{ matrix.config.package_prefix }}catch

    - name: SQLPP11 cache
      uses: actions/cache@v2
      id: cache_sqlpp11
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.SQLPP11_INSTALL_PATH }}
        key: ${{ runner.os }}-${{ matrix.config.msys_variant }}-sqlpp11-${{ env.SQLPP11_VERSION }}-connector-mysql-${{ env.SQLPP11_CONNECTOR_MYSQL_VERSION }}-4

    - name: SQLPP11
      if: ${{ steps.cache_sqlpp11.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        def execute_msys_command(cmd):
          cmd_prefix = "C:/msys64/msys2_shell.cmd -defterm -no-start -here -${{ matrix.config.msys_variant }} -shell sh -c "
          execute_command(cmd_prefix + '"{}"'.format(cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        ninja_binary = os.path.join(root, ninja_tool_path, "ninja").replace("\\", "/")
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']
        cmake_binary = os.path.join(cmake_tool_binary_path, "cmake").replace("\\", "/")

        # sqlpp11 itself
        os.chdir(root)

        sqlpp11_version = os.environ['SQLPP11_VERSION']
        sqlpp11_source_dir  = os.path.normpath(os.path.join(root, "sqlpp11-{}".format(sqlpp11_version)))
        sqlpp11_install_dir = os.path.normpath(os.path.join(root, "${{ env.SQLPP11_INSTALL_PATH }}")).replace("\\", "/")
        os.mkdir(sqlpp11_install_dir)

        sqlpp11_url = "https://github.com/rbock/sqlpp11/archive/{}.zip".format(sqlpp11_version)
        open("sqlpp11.zip", "wb").write(requests.get(sqlpp11_url, allow_redirects=True).content)
        execute_command("7z x sqlpp11.zip")

        os.chdir(sqlpp11_source_dir)

        execute_msys_command(("{} -GNinja -DCMAKE_MAKE_PROGRAM={} -DCMAKE_BUILD_TYPE=Release " +
                              "-DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX={} -DCMAKE_PREFIX_PATH={} " +
                              ".").format(cmake_binary, ninja_binary, sqlpp11_install_dir,
                                          root + "/" + os.environ['BOOST_INSTALL_PATH']))
        execute_msys_command("{} --build . --target all".format(cmake_binary))
        execute_msys_command("{} --build . --target install".format(cmake_binary))

        # chrono date (sqlpp11 connector mysql dependency)
        os.chdir(root)

        chrono_date_version = os.environ['CHRONO_DATE_VERSION']
        chrono_date_source_dir  = os.path.normpath(os.path.join(root, "date-{}".format(chrono_date_version)))

        chrono_date_url = "https://github.com/HowardHinnant/date/archive/v{}.zip".format(chrono_date_version)
        open("chrono_date.zip", "wb").write(requests.get(chrono_date_url, allow_redirects=True).content)
        execute_command("7z x chrono_date.zip")

        os.chdir(chrono_date_source_dir)

        execute_msys_command(("{} -GNinja -DCMAKE_MAKE_PROGRAM={} " +
                              "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX={} " +
                              ".").format(cmake_binary, ninja_binary, sqlpp11_install_dir))
        execute_msys_command("{} --build . --target all".format(cmake_binary))
        execute_msys_command("{} --build . --target install".format(cmake_binary))

        # sqlpp11 connector mysql
        os.chdir(root)

        sqlpp11_conn_version = os.environ['SQLPP11_CONNECTOR_MYSQL_VERSION']
        sqlpp11_conn_source_dir  = os.path.normpath(os.path.join(root, "sqlpp11-connector-mysql-{}".format(sqlpp11_conn_version)))

        sqlpp11_conn_url = "https://github.com/rbock/sqlpp11-connector-mysql/archive/{}.zip".format(sqlpp11_conn_version)
        open("sqlpp11_conn.zip", "wb").write(requests.get(sqlpp11_conn_url, allow_redirects=True).content)
        execute_command("7z x sqlpp11_conn.zip")

        os.chdir(sqlpp11_conn_source_dir)

        execute_msys_command(("{} -GNinja -DCMAKE_MAKE_PROGRAM={} " +
                              "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX={} -DUSE_MARIADB=TRUE " +
                              "-DDATE_INCLUDE_DIR={}/include -DSQLPP11_INCLUDE_DIR={}/include -DENABLE_TESTS=OFF " +
                              ".").format(cmake_binary, ninja_binary, sqlpp11_install_dir,
                                          sqlpp11_install_dir, sqlpp11_install_dir))
        execute_msys_command("{} --build . --target all".format(cmake_binary))
        execute_msys_command("{} --build . --target install".format(cmake_binary))

        os.chdir(repo)

    - name: MsgPack cache
      uses: actions/cache@v2
      id: cache_msgpack
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.MSGPACK_INSTALL_PATH }}
        key: ${{ runner.os }}-msgpack-${{ env.MSGPACK_VERSION }}

    - name: MsgPack
      if: ${{ steps.cache_msgpack.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        def execute_msys_command(cmd):
          cmd_prefix = "C:/msys64/msys2_shell.cmd -defterm -no-start -here -mingw64 -shell sh -c "
          execute_command(cmd_prefix + '"{}"'.format(cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        ninja_binary = os.path.join(root, ninja_tool_path, "ninja").replace("\\", "/")
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']
        cmake_binary = os.path.join(cmake_tool_binary_path, "cmake").replace("\\", "/")

        os.chdir(root)

        msgpack_version = os.environ['MSGPACK_VERSION']

        msgpack_source_dir  = os.path.normpath(os.path.join(root, "msgpack-{}".format(msgpack_version)))
        msgpack_install_dir = os.path.normpath(os.path.join(root, "${{ env.MSGPACK_INSTALL_PATH }}")).replace("\\", "/")
        os.mkdir(msgpack_install_dir)

        msgpack_url = "https://github.com/msgpack/msgpack-c/releases/download/cpp-{}/msgpack-{}.tar.gz".format(msgpack_version, msgpack_version)
        open("msgpack.tar.gz", "wb").write(requests.get(msgpack_url, allow_redirects=True).content)
        execute_msys_command("tar -xf msgpack.tar.gz")

        os.chdir(msgpack_source_dir)

        execute_msys_command("{} -B build -DCMAKE_BUILD_TYPE=Release -GNinja -DCMAKE_MAKE_PROGRAM={} -DCMAKE_INSTALL_PREFIX={} "
                             "-DMSGPACK_CXX17=ON -DMSGPACK_BUILD_TESTS=OFF -DMSGPACK_BUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DMSGPACK_ENABLE_STATIC=OFF "
                             ".".format(cmake_binary, ninja_binary,
                                        msgpack_install_dir))
        execute_msys_command("{} --build build --target all".format(cmake_binary))
        execute_msys_command("{} --build build --target install".format(cmake_binary))
        os.chdir(repo)

    - name: Catch2 cache
      uses: actions/cache@v2
      id: cache_catch2
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.CATCH2_INSTALL_PATH }}
        key: ${{ runner.os }}-${{ matrix.config.msys_variant }}-catch2-${{ env.CATCH2_VERSION }}

    - name: Catch2
      if: ${{ steps.cache_catch2.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        def execute_msys_command(cmd):
          cmd_prefix = "C:/msys64/msys2_shell.cmd -defterm -no-start -here -${{ matrix.config.msys_variant }} -shell sh -c "
          execute_command(cmd_prefix + '"{}"'.format(cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        ninja_binary = os.path.join(root, ninja_tool_path, "ninja").replace("\\", "/")
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']
        cmake_binary = os.path.join(cmake_tool_binary_path, "cmake").replace("\\", "/")

        os.chdir(root)

        catch2_version = os.environ['CATCH2_VERSION']

        catch2_source_dir  = os.path.normpath(os.path.join(root, "Catch2-{}".format(catch2_version)))
        catch2_install_dir = os.path.normpath(os.path.join(root, "${{ env.CATCH2_INSTALL_PATH }}")).replace("\\", "/")
        os.mkdir(catch2_install_dir)

        catch2_url = "https://github.com/catchorg/Catch2/archive/v{}.tar.gz".format(catch2_version)
        open("catch2.tar.gz", "wb").write(requests.get(catch2_url, allow_redirects=True).content)
        execute_msys_command("tar -xf catch2.tar.gz")

        os.chdir(catch2_source_dir)

        execute_msys_command("{} -B build -DBUILD_TESTING=OFF -GNinja -DCMAKE_MAKE_PROGRAM={} -DCMAKE_INSTALL_PREFIX={}  "
                             ".".format(cmake_binary, ninja_binary,
                                        catch2_install_dir))
        execute_msys_command("{} --build build --target all".format(cmake_binary))
        execute_msys_command("{} --build build --target install".format(cmake_binary))
        os.chdir(repo)

    - name: Configure
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: cmd
      run: |
        C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -${{ matrix.config.msys_variant }} -shell sh "${{ env.REPO_PATH }}/build-config/scripts/windows-configure.sh"

    - name: Build
      run: ${{ env.CMAKE_TOOL_BINARY_PATH }}\\cmake --build build --target all

    - name: Run tests
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -msys2 -shell sh {0}
      run: |
        #cd build
        #ctest
        #cd ..

    - name: Install Strip
      run: ${{ env.CMAKE_TOOL_BINARY_PATH }}\\cmake --install build --prefix install --strip

    - name: Copy required DLL
      run: |
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libstdc++-6.dll"            install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libgcc_s_seh-1.dll"         install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libwinpthread-1.dll"        install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libmariadb.dll"             install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\Qt5Core.dll"                install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\Qt5Gui.dll"                 install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\Qt5Sql.dll"                 install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\Qt5Widgets.dll"             install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libicuin68.dll"             install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libdouble-conversion.dll"   install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libicuuc68.dll"             install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libzstd.dll"                install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libpcre2-16-0.dll"          install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libicudt68.dll"             install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libharfbuzz-0.dll"          install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libpng16-16.dll"            install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libgraphite2.dll"           install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libglib-2.0-0.dll"          install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libfreetype-6.dll"          install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libintl-8.dll"              install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libpcre-1.dll"              install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libbrotlidec.dll"           install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libbz2-1.dll"               install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libbrotlicommon.dll"        install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libiconv-2.dll"             install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\zlib1.dll"                  install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\libsasl2-3.dll"             install\\bin
        copy "C:\\msys64\\${{ matrix.config.msys_variant }}\\bin\\yaml-cpp.dll"               install\\bin

    - name: Win Deploy Qt
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -msys2 -shell sh {0}
      run: |
        /${{ matrix.config.msys_variant }}/bin/windeployqt.exe --dir install/bin install/bin/melon-client-desktop.exe

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        path: ./install
        name: ${{ matrix.config.artifact }}-${{ matrix.config.msys_variant }}

name: Build Android

on:
  push:
    branches: develop
  pull_request:
    branches: develop

jobs:
  build-core-arm:
    name: ${{ format('{0} {1} {2}', matrix.config.prefix, matrix.config.build_type, matrix.config.suffix) }}
    runs-on: ${{ matrix.config.os }}
    env:
      CMAKE_TOOL_VERSION: 3.19.1
      CMAKE_TOOL_PATH: cmake-tool
      NINJA_TOOL_VERSION: 1.10.2
      NINJA_TOOL_PATH: ninja-tool
      BOOST_MAJOR: 1
      BOOST_MINOR: 74
      BOOST_BUILD: 0
      BOOST_INSTALL_PATH: boost-install
      CYRUS_SASL_VERSION: 2.1.27
      CYRUS_SASL_INSTALL_PATH: cyrus-sasl-install
      YAML_CPP_VERSION: 0.6.3
      YAML_CPP_INSTALL_PATH: yaml-cpp-install
    strategy:
      fail-fast: true
      matrix:
        config:
        - {
            os: ubuntu-20.04,
            prefix: "Android Core ARM",
            suffix: "",
            artifact: "core-arm-debug-android",
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
          }

    steps:
    - uses: actions/checkout@v2

    - name: Set environment variables
      shell: python {0}
      run: |
        import os

        print("\n\nAAA\n\n")
        print(os.environ);
        print("\n\nBBB\n\n")

        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))

        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo.replace("\\", "\\\\")))
          env_file.write("ROOT_PATH={}\n".format(root.replace("\\", "\\\\")))

          env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "bin")))

    - name: List dir NDK
      run: |
        ls -al /usr/local/lib/android/sdk/ndk-bundle

    - name: Docker
      run: |
        docker build . -t build-android
        CONTAINER_ID=`docker run -d build-android`
        docker cp $CONTAINER_ID:/home/builduser/repo/install `pwd`/install

    - name: Tar files
      run: tar -cvf install.tar ./install

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        path: ./install.tar
        name: ${{ matrix.config.artifact }}

  build-android:
    name: Android Debug
    runs-on: ubuntu-20.04
    needs: build-core-arm
    env:
      GRADLE_AND_BUILD_CACHE_VERSION: 5  # increment when need to update gradle & build cache

    steps:
    - uses: actions/checkout@v2

    - name: Gradle & build cache
      uses: actions/cache@v2
      id: cache_gradle
      with:
        path: |
          src/client-android/.gradle/
          src/client-android/gradle/
          src/client-android/gradlew
          src/client-android/gradlew.bat
          src/client-android/build/
          src/client-android/app/build/
        key: ${{ runner.os }}-gradle-and-build-${{ env.GRADLE_AND_BUILD_CACHE_VERSION }}

    - name: Gradle wrapper
      if: ${{ steps.cache_gradle.outputs.cache-hit != 'true' }}
      shell: sh {0}
      run: |
        cd src/client-android
        gradle wrapper

    - name: Build debug apk
      shell: sh {0}
      run: |
        cd src/client-android
        ./gradlew --no-daemon --parallel --build-cache assembleDebug

    - name: Upload debug apk
      uses: actions/upload-artifact@v2
      with:
        path: ./src/client-android/app/build/outputs/apk/debug/app-debug.apk
        name: android-debug

name: Build all

on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      BOOST_MAJOR: 1
      BOOST_MINOR: 74
      BOOST_BUILD: 0
      BOOST_INSTALL_PATH: boost-install
      CYRUS_SASL_VERSION: 2.1.27
      CYRUS_SASL_INSTALL_PATH: cyrus-sasl-install
    strategy:
      fail-fast: true
      matrix:
        config:
        - {
            name: "Windows Latest MinGW64", artifact: "Windows-MinGW64",
            os: windows-latest,
            build_type: "Release", cc: "gcc", cxx: "g++",
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux",
            os: ubuntu-20.04,
            build_type: "Release", cc: "gcc", cxx: "g++",
          }
        - {
            name: "MacOS Latest Clang", artifact: "MacOS",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++",
          }

    steps:
    - uses: actions/checkout@v2

    - name: Set environment variables
      shell: python {0}
      run: |
        import os
        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))
        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo.replace("\\", "\\\\")))
          env_file.write("ROOT_PATH={}\n".format(root.replace("\\", "\\\\")))

    - name: Install required python modules
      run: pip install requests

    - name: Install build tools (Windows)
      if: ${{ matrix.config.name == 'Windows Latest MinGW64' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -mingw64 -shell sh {0}
      run: |
        # Comment because gcc and cmake are already installed
        # pacman -S --noconfirm mingw-w64-x86_64-gcc
        # pacman -S --noconfirm mingw-w64-x86_64-cmake
        pacman -S --noconfirm mingw-w64-x86_64-ninja

    - name: Install build tools (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      shell: sh {0}
      run: |
        # Comment because cmake is already installed
        # apt-get install cmake -y
        sudo apt-get install gcc-9 g++-9 -y
        sudo apt-get install ninja-build -y

    - name: Install build tools (MacOS)
      if: ${{ matrix.config.name == 'MacOS Latest Clang' }}
      shell: sh {0}
      run: |
        # Comment because cmake is already installed
        # brew install cmake
        brew install ninja

    - name: Boost cache
      uses: actions/cache@v2
      id: cache_boost
      with:
        path: ${{ env.ROOT_PATH }}/boost-install
        key: ${{ runner.os }}-boost-${{ env.BOOST_MAJOR }}-${{ env.BOOST_MINOR }}-${{ env.BOOST_BUILD }}-program_options-system

    - name: Boost
      id: boost
      if: ${{ steps.cache_boost.outputs.cache-hit != 'true' }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        boost_major = os.environ['BOOST_MAJOR']
        boost_minor = os.environ['BOOST_MINOR']
        boost_build = os.environ['BOOST_BUILD']

        boost_source_dir  = os.path.normpath(os.path.join(root, "boost_{}_{}_{}".format(boost_major, boost_minor, boost_build)))
        boost_install_dir = os.path.normpath(os.path.join(root, "${{ env.BOOST_INSTALL_PATH }}"))
        os.mkdir(boost_install_dir)

        boost_url = "https://dl.bintray.com/boostorg/release/{}.{}.{}/source/boost_{}_{}_{}.zip".format(boost_major, boost_minor, boost_build,
                                                                                                        boost_major, boost_minor, boost_build)
        open("boost.zip", "wb").write(requests.get(boost_url, allow_redirects=True).content)
        execute_command("7z x boost.zip")

        os.chdir(boost_source_dir)

        if "${{ matrix.config.name }}" == "Windows Latest MinGW64" or \
           "${{ matrix.config.name }}" == "Ubuntu Latest GCC":
          toolset = "gcc"
        elif "${{ matrix.config.name }}" == "MacOS Latest Clang":
          toolset = "clang"
        else:
          raise RuntimeError("Unknown config name {}".format("${{ matrix.config.name }}"))

        if "${{ runner.os }}" == "Windows":
          cmd_prefix = "C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -shell sh -c "
          execute_command(cmd_prefix + '"chmod +x ./bootstrap.sh"')
          execute_command(cmd_prefix + '"chmod +x ./tools/build/src/engine/build.sh"')
          execute_command(cmd_prefix + '"./bootstrap.sh --with-libraries=program_options,system --with-toolset={} --prefix={}"'.format(toolset, "../boost-install"))
          execute_command(cmd_prefix + '"./b2"')
          execute_command(cmd_prefix + '"./b2 install"')
        else:
          execute_command("chmod +x ./bootstrap.sh")
          execute_command("chmod +x ./tools/build/src/engine/build.sh")
          execute_command("./bootstrap.sh --with-libraries=program_options,system --with-toolset={} --prefix={}".format(toolset, boost_install_dir))
          execute_command("./b2")
          execute_command("./b2 install")

        os.chdir(repo)

    - name: Cyrus SASL (Windows)
      if: ${{ matrix.config.name == 'Windows Latest MinGW64' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -mingw64 -shell sh {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-cyrus-sasl

    - name: Cyrus SASL cache (Ubuntu & MacOS)
      uses: actions/cache@v2
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' || matrix.config.name == 'MacOS Latest Clang' }}
      id: cache_cyrus_sasl_unix
      with:
        path: ${{ env.ROOT_PATH }}/cyrus-sasl-install
        key: ${{ runner.os }}-cyrus-sasl-${{ env.CYRUS_SASL_VERSION }}

    - name: Cyrus SASL (Ubuntu & MacOS)
      if: ${{ (matrix.config.name == 'Ubuntu Latest GCC' || matrix.config.name == 'MacOS Latest Clang') && steps.cache_cyrus_sasl_unix.outputs.cache-hit != 'true' }}
      id: cyrus_sasl_unix
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        sasl_version = os.environ['CYRUS_SASL_VERSION']

        sasl_source_dir  = os.path.normpath(os.path.join(root, "cyrus-sasl-{}".format(sasl_version)))
        sasl_install_dir = os.path.normpath(os.path.join(root, "${{ env.CYRUS_SASL_INSTALL_PATH }}"))
        os.mkdir(sasl_install_dir)

        sasl_url = "https://github.com/cyrusimap/cyrus-sasl/releases/download/cyrus-sasl-{}/cyrus-sasl-{}.tar.gz".format(sasl_version, sasl_version)
        open("sasl.tar.gz", "wb").write(requests.get(sasl_url, allow_redirects=True).content)
        execute_command("7z x sasl.tar.gz -so | 7z x -si -ttar")

        os.chdir(sasl_source_dir)

        execute_command("chmod +x ./configure")
        execute_command("./configure --prefix={}".format(sasl_install_dir))
        execute_command("chmod +x ./config/install-sh")
        execute_command("make")
        execute_command("sudo make install")  # MacOS requires sudo to copy files to /Library/Frameworks/
        os.chdir(repo)

    - name: Qt5 (Windows)
      if: ${{ matrix.config.name == 'Windows Latest MinGW64' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -mingw64 -shell sh {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-qt5

    - name: Qt5 (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      shell: sh {0}
      run: |
        sudo apt-get install qt5-default qttools5-dev -y

    - name: Qt5 (MacOS)
      if: ${{ matrix.config.name == 'MacOS Latest Clang' }}
      shell: sh {0}
      run: |
        brew install qt5

    - name: Configure (Windows)
      if: ${{ matrix.config.name == 'Windows Latest MinGW64' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -shell sh {0}
      run: |
        cmake \
        -S . \
        -B build \
        -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
        -G Ninja \
        -D CMAKE_RANLIB=/mingw64/bin/ranlib.exe \
        -D CMAKE_VERBOSE_MAKEFILE=ON \
        -D CMAKE_MAKE_PROGRAM=/mingw64/bin/ninja.exe \
        -D CMAKE_C_COMPILER=/mingw64/bin/gcc.exe \
        -D CMAKE_CXX_COMPILER=/mingw64/bin/g++.exe \
        -D CMAKE_AR=/mingw64/bin/ar.exe \
        -D CMAKE_LINKER=/mingw64/bin/ld.exe \
        -D CMAKE_DLLTOOL=/mingw64/bin/dlltool.exe \
        -D CMAKE_NM=/mingw64/bin/nm.exe \
        -D CMAKE_PREFIX_PATH=${{ env.ROOT_PATH }}\\${{ env.BOOST_INSTALL_PATH }} \
        -D CMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Configure (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        cmake \
        -S . \
        -B build \
        -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
        -G Ninja \
        -D CMAKE_PREFIX_PATH="${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }};${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }}" \
        -D CMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Configure (MacOS)
      if: ${{ matrix.config.name == 'MacOS Latest Clang' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        cmake \
        -S . \
        -B build \
        -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
        -G Ninja \
        -D CMAKE_PREFIX_PATH="${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }};${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }};/usr/local/opt/qt" \
        -D CMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Build
      run: cmake --build build --target all

    - name: Run tests
      run: cd build && ctest && cd ..

    - name: Install Strip
      run: cmake --install build --prefix install --strip

    - name: Copy required DLL (Windows)
      if: ${{ matrix.config.name == 'Windows Latest MinGW64' }}
      run: |
        copy "C:\\msys64\\mingw64\\bin\\libstdc++-6.dll"            install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libgcc_s_seh-1.dll"         install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libwinpthread-1.dll"        install\\bin
        copy "C:\\msys64\\mingw64\\bin\\Qt5Core.dll"                install\\bin
        copy "C:\\msys64\\mingw64\\bin\\Qt5Gui.dll"                 install\\bin
        copy "C:\\msys64\\mingw64\\bin\\Qt5Widgets.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libicuin67.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libdouble-conversion.dll"   install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libicuuc67.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libzstd.dll"                install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libpcre2-16-0.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libicudt67.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libharfbuzz-0.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libpng16-16.dll"            install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libgraphite2.dll"           install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libglib-2.0-0.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libfreetype-6.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libintl-8.dll"              install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libpcre-1.dll"              install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libbrotlidec.dll"           install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libbz2-1.dll"               install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libbrotlicommon.dll"        install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libiconv-2.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\zlib1.dll"                  install\\bin

    - name: Win Deploy Qt
      if: ${{ matrix.config.name == 'Windows Latest MinGW64' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -shell sh {0}
      run: |
        windeployqt.exe --dir install/bin install/bin/melon-client-desktop.exe

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        path: ./install
        name: ${{ matrix.config.artifact }}

    - name: Prepare to run static analysis (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      run: mkdir reports

    - name: Install clang-tidy (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      run: sudo apt-get install clang-tidy -y

    - name: Run clang-tidy (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      run: run-clang-tidy -p=build -j=2 2>&1 | tee reports/clang-tidy-report.log

    - name: Install PVS-Studio (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      shell: sh {0}
      run: |
        wget -q -O - https://files.viva64.com/etc/pubkey.txt | sudo apt-key add -
        sudo wget -O /etc/apt/sources.list.d/viva64.list https://files.viva64.com/etc/viva64.list
        sudo apt-get update
        sudo apt-get install pvs-studio

    - name: Run PVS-Studio (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      env:
        PVS_NAME: ${{ secrets.PVS_NAME }}
        PVS_KEY: ${{ secrets.PVS_KEY }}
      shell: sh {0}
      run: |
        pvs-studio-analyzer credentials $PVS_NAME $PVS_KEY
        pvs-studio-analyzer analyze -j2 -f build/compile_commands.json
        plog-converter -t fullhtml -o reports/pvs-report -a GA:1,2,3 PVS-Studio.log

    - name: Upload static analysis results (Ubuntu)
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./reports
        name: static-analyzer-reports

    - name: Fail if clang-tidy found warnings
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      shell: sh {0}
      run: cat reports/clang-tidy-report.log | grep -E 'warning: |error: '; status=$?; test $status -ne 0

    - name: Fail if PVS-Studio found warnings
      if: ${{ matrix.config.name == 'Ubuntu Latest GCC' }}
      shell: sh {0}
      run: plog-converter -t tasklist -a GA:1,2,3 -w PVS-Studio.log

  #release:
    #if: contains(github.ref, 'tags/v')
    #runs-on: ubuntu-latest
    #needs: build

    #steps:
    #- name: Create Release
      #id: create_release
      #uses: actions/create-release@v1.0.0
      #env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #with:
        #tag_name: ${{ github.ref }}
        #release_name: Release ${{ github.ref }}
        #draft: false
        #prerelease: false

    #- name: Store Release url
      #run: |
        #echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    #- uses: actions/upload-artifact@v1
      #with:
        #path: ./upload_url
        #name: upload_url

  #publish:
    #if: contains(github.ref, 'tags/v')
    #name: ${{ matrix.config.name }}
    #runs-on: ${{ matrix.config.os }}
    #strategy:
      #fail-fast: false
      #matrix:
        #config:
        #- {
            #name: "Windows Latest MinGW64", artifact: "Windows-MinGW64.tar.xz",
            #os: ubuntu-latest
          #}
        #- {
            #name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            #os: ubuntu-latest
          #}
        #- {
            #name: "MacOS Latest Clang", artifact: "MacOS.tar.xz",
            #os: ubuntu-latest
          #}
    #needs: release

    #steps:
    #- name: Download artifact
      #uses: actions/download-artifact@v1
      #with:
        #name: ${{ matrix.config.artifact }}
        #path: ./

    #- name: Download URL
      #uses: actions/download-artifact@v1
      #with:
        #name: upload_url
        #path: ./
    #- id: set_upload_url
      #run: |
        #upload_url=`cat ./upload_url`
        #echo ::set-output name=upload_url::$upload_url

    #- name: Upload to Release
      #id: upload_to_release
      #uses: actions/upload-release-asset@v1.0.1
      #env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #with:
        #upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        #asset_path: ./${{ matrix.config.artifact }}
        #asset_name: ${{ matrix.config.artifact }}
        #asset_content_type: application/x-gtar

name: Build all

on:
  push:
    branches: develop
  pull_request:
    branches: develop

jobs:
  build-core-server-client-desktop:
    name: ${{ format('{0} {1} {2}', matrix.config.os, matrix.config.build_type, matrix.config.suffix) }}
    runs-on: ${{ matrix.config.os }}
    env:
      CMAKE_TOOL_VERSION: 3.19.1
      CMAKE_TOOL_PATH: cmake-tool
      NINJA_TOOL_VERSION: 1.10.2
      NINJA_TOOL_PATH: ninja-tool
      BOOST_MAJOR: 1
      BOOST_MINOR: 74
      BOOST_BUILD: 0
      BOOST_INSTALL_PATH: boost-install
      CYRUS_SASL_VERSION: 2.1.27
      CYRUS_SASL_INSTALL_PATH: cyrus-sasl-install
      YAML_CPP_VERSION: 0.6.3
      YAML_CPP_INSTALL_PATH: yaml-cpp-install
      QT_SHORT_VERSION: 5.15
      QT_VERSION: 5.15.1
      QT_INSTALL_PATH: qt-install
      MINGW64_CACHE_VERSION: 11  # increment when need to update mingw64 packages
    strategy:
      fail-fast: true
      matrix:
        config:
        - {
            os: windows-latest,
            suffix: "",
            artifact: "all-release-windows-mingw64",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            os: ubuntu-20.04,
            suffix: "",
            artifact: "all-release-linux",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
          }
        - {
            os: ubuntu-20.04,
            suffix: "CodeQL",
            artifact: "",
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
          }
        - {
            os: ubuntu-20.04,
            suffix: "PVS-Studio",
            artifact: "",
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
          }
        - {
            os: ubuntu-20.04,
            suffix: "clang-tidy",
            artifact: "",
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
          }
        - {
            os: macos-latest,
            suffix: "",
            artifact: "all-release-macos",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
          }

    steps:
    - uses: actions/checkout@v2

    - name: Set environment variables
      shell: python {0}
      run: |
        import os

        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))

        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo.replace("\\", "\\\\")))
          env_file.write("ROOT_PATH={}\n".format(root.replace("\\", "\\\\")))

          if "${{ runner.os }}" == "Windows" or \
             "${{ runner.os }}" == "Linux":
            env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "bin").replace("\\", "\\\\")))
          elif "${{ runner.os }}" == "macOS":
            env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "CMake.app", "Contents", "bin")))
          else:
            raise RuntimeError("Unknown OS {}".format("${{ runner.os }}"))

    - name: Install required python modules
      run: pip install requests

    - name: Install Clang (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: sudo apt-get install clang -y

    - name: Ninja and CMake cache
      uses: actions/cache@v2
      id: cache_ninja_and_cmake
      with:
        path: |
          ${{ env.ROOT_PATH }}/${{ env.CMAKE_TOOL_PATH }}
          ${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}
        key: ${{ runner.os }}-ninja-${{ env.NINJA_TOOL_VERSION }}-cmake-${{ env.CMAKE_TOOL_VERSION }}

    - name: Download Ninja and CMake
      id: download_ninja_and_cmake
      if: ${{ steps.cache_ninja_and_cmake.outputs.cache-hit != 'true' }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        cmake_version = os.environ['CMAKE_TOOL_VERSION']
        ninja_version = os.environ['NINJA_TOOL_VERSION']
        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        if "${{ runner.os }}" == "Windows":
          ninja_suffix = "win.zip"
          cmake_suffix = "win64-x64.zip"
          cmake_dir = "cmake-{}-win64-x64".format(cmake_version)
        elif "${{ runner.os }}" == "Linux":
          ninja_suffix = "linux.zip"
          cmake_suffix = "Linux-x86_64.tar.gz"
          cmake_dir = "cmake-{}-Linux-x86_64".format(cmake_version)
        elif "${{ runner.os }}" == "macOS":
          ninja_suffix = "mac.zip"
          cmake_suffix = "Darwin-x86_64.tar.gz"
          cmake_dir = "cmake-{}-Darwin-x86_64".format(cmake_version)
        else:
          raise RuntimeError("Unknown OS {}".format("${{ runner.os }}"))

        os.mkdir(ninja_tool_path)
        os.chdir(ninja_tool_path)
        ninja_url = "https://github.com/ninja-build/ninja/releases/download/v{}/ninja-{}".format(ninja_version, ninja_suffix)
        open("ninja.zip", "wb").write(requests.get(ninja_url, allow_redirects=True).content)
        execute_command("7z x ninja.zip")
        if not "${{ runner.os }}" == "Windows":
          execute_command("chmod +x ninja")
        os.chdir(root)

        cmake_url = "https://github.com/Kitware/CMake/releases/download/v{}/cmake-{}-{}".format(cmake_version, cmake_version, cmake_suffix)
        if "${{ runner.os }}" == "Windows":
          open("cmake.zip", "wb").write(requests.get(cmake_url, allow_redirects=True).content)
          execute_command("7z x cmake.zip")
          os.rename(cmake_dir, cmake_tool_path)
        elif "${{ runner.os }}" == "Linux" or \
             "${{ runner.os }}" == "macOS":
          open("cmake.tar.gz", "wb").write(requests.get(cmake_url, allow_redirects=True).content)
          execute_command("7z x cmake.tar.gz -so | 7z x -si -ttar")
          os.rename(cmake_dir, cmake_tool_path)
          execute_command("chmod +x {}/cmake".format(cmake_tool_binary_path))

        os.chdir(repo)

    - name: Boost cache
      uses: actions/cache@v2
      id: cache_boost
      with:
        path: ${{ env.ROOT_PATH }}/boost-install
        key: ${{ runner.os }}-boost-${{ env.BOOST_MAJOR }}-${{ env.BOOST_MINOR }}-${{ env.BOOST_BUILD }}-program_options-system

    - name: Boost
      id: boost
      if: ${{ steps.cache_boost.outputs.cache-hit != 'true' }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        boost_major = os.environ['BOOST_MAJOR']
        boost_minor = os.environ['BOOST_MINOR']
        boost_build = os.environ['BOOST_BUILD']

        boost_source_dir  = os.path.normpath(os.path.join(root, "boost_{}_{}_{}".format(boost_major, boost_minor, boost_build)))
        boost_install_dir = os.path.normpath(os.path.join(root, "${{ env.BOOST_INSTALL_PATH }}"))
        os.mkdir(boost_install_dir)

        boost_url = "https://dl.bintray.com/boostorg/release/{}.{}.{}/source/boost_{}_{}_{}.zip".format(boost_major, boost_minor, boost_build,
                                                                                                        boost_major, boost_minor, boost_build)
        open("boost.zip", "wb").write(requests.get(boost_url, allow_redirects=True).content)
        execute_command("7z x boost.zip")

        os.chdir(boost_source_dir)

        if "${{ runner.os }}" == "Windows":
          toolset = "gcc"
        elif "${{ runner.os }}" == "macOS" or \
             "${{ runner.os }}" == "Linux":
          toolset = "clang"
        else:
          raise RuntimeError("Unknown OS {}".format("${{ runner.os }}"))

        if "${{ runner.os }}" == "Windows":
          cmd_prefix = "C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -shell sh -c "
          execute_command(cmd_prefix + '"chmod +x ./bootstrap.sh"')
          execute_command(cmd_prefix + '"chmod +x ./tools/build/src/engine/build.sh"')
          execute_command(cmd_prefix + '"./bootstrap.sh --with-libraries=program_options,system --with-toolset={} --prefix={}"'.format(toolset, "../boost-install"))
          execute_command(cmd_prefix + '"./b2"')
          execute_command(cmd_prefix + '"./b2 install"')
        else:
          execute_command("chmod +x ./bootstrap.sh")
          execute_command("chmod +x ./tools/build/src/engine/build.sh")
          execute_command("./bootstrap.sh --with-libraries=program_options,system --with-toolset={} --prefix={}".format(toolset, boost_install_dir))
          execute_command("./b2")
          execute_command("./b2 install")

        os.chdir(repo)

    # mingw64 packages:
    # - mingw-w64-x86_64-cyrus-sasl (and mingw-w64-x86_64-gdbm as a dependency)
    # - mingw-w64-x86_64-yaml-cpp
    # - mingw-w64-x86_64-qt5 and its dependencies
    - name: Mingw64 cache (Windows)
      uses: actions/cache@v2
      if: ${{ runner.os == 'Windows' }}
      id: cache_mingw64_windows
      with:
        path: |
          C:/msys64/mingw64/bin/gdbm_dump.exe
          C:/msys64/mingw64/bin/gdbm_load.exe
          C:/msys64/mingw64/bin/gdbmtool.exe
          C:/msys64/mingw64/bin/libgdbm-6.dll
          C:/msys64/mingw64/bin/libgdbm_compat-4.dll
          C:/msys64/mingw64/include/dbm.h
          C:/msys64/mingw64/include/gdbm.h
          C:/msys64/mingw64/include/ndbm.h
          C:/msys64/mingw64/lib/libgdbm.a
          C:/msys64/mingw64/lib/libgdbm.dll.a
          C:/msys64/mingw64/lib/libgdbm_compat.a
          C:/msys64/mingw64/lib/libgdbm_compat.dll.a
          C:/msys64/mingw64/share/licenses/gdbm/

          C:/msys64/mingw64/bin/libsasl2-3.dll
          C:/msys64/mingw64/include/sasl/
          C:/msys64/mingw64/lib/libsasl2.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libsasl2.pc
          C:/msys64/mingw64/lib/sasl2/
          C:/msys64/mingw64/sbin/pluginviewer.exe
          C:/msys64/mingw64/sbin/sasldblistusers2.exe
          C:/msys64/mingw64/sbin/saslpasswd2.exe
          C:/msys64/mingw64/share/licenses/cyrus-sasl/

          C:/msys64/mingw64/bin/yaml-cpp.dll
          C:/msys64/mingw64/include/yaml-cpp/
          C:/msys64/mingw64/lib/cmake/yaml-cpp/
          C:/msys64/mingw64/lib/libyaml-cpp.a
          C:/msys64/mingw64/lib/pkgconfig/yaml-cpp.pc
          C:/msys64/mingw64/lib/yaml-cpp.dll.a
          C:/msys64/mingw64/share/licenses/yaml-cpp/

          C:/msys64/mingw64/bin/assimp.exe
          C:/msys64/mingw64/bin/assimp_viewer.exe
          C:/msys64/mingw64/bin/libassimp.dll
          C:/msys64/mingw64/include/assimp/
          C:/msys64/mingw64/lib/cmake/assimp-5.0/
          C:/msys64/mingw64/lib/cmake/assimp-5.0/assimp-config-version.cmake
          C:/msys64/mingw64/lib/cmake/assimp-5.0/assimp-config.cmake
          C:/msys64/mingw64/lib/cmake/assimp-5.0/assimpTargets-release.cmake
          C:/msys64/mingw64/lib/cmake/assimp-5.0/assimpTargets.cmake
          C:/msys64/mingw64/lib/libassimp.dll.a
          C:/msys64/mingw64/lib/libIrrXML.a
          C:/msys64/mingw64/lib/pkgconfig/assimp.pc
          C:/msys64/mingw64/share/licenses/assimp/

          C:/msys64/mingw64/bin/dbus*.exe
          C:/msys64/mingw64/bin/libdbus-1-3.dll
          C:/msys64/mingw64/etc/dbus-1/
          C:/msys64/mingw64/include/dbus-1.0/
          C:/msys64/mingw64/lib/cmake/DBus1/
          C:/msys64/mingw64/lib/dbus-1.0/
          C:/msys64/mingw64/lib/libdbus-1.a
          C:/msys64/mingw64/lib/libdbus-1.dll.a
          C:/msys64/mingw64/lib/pkgconfig/dbus-1.pc
          C:/msys64/mingw64/share/dbus-1/
          C:/msys64/mingw64/share/xml/dbus-1/
          C:/msys64/mingw64/var/lib/dbus/

          C:/msys64/mingw64/bin/libdouble-conversion.dll
          C:/msys64/mingw64/include/double-conversion/
          C:/msys64/mingw64/lib/cmake/double-conversion/
          C:/msys64/mingw64/lib/libdouble-conversion.a
          C:/msys64/mingw64/lib/libdouble-conversion.dll.a
          C:/msys64/mingw64/share/licenses/double-conversion/

          C:/msys64/mingw64/bin/fc-*.exe
          C:/msys64/mingw64/bin/libfontconfig-1.dll
          C:/msys64/mingw64/etc/fonts/conf.d/
          C:/msys64/mingw64/etc/fonts/fonts.conf
          C:/msys64/mingw64/include/fontconfig/
          C:/msys64/mingw64/lib/libfontconfig.a
          C:/msys64/mingw64/lib/libfontconfig.dll.a
          C:/msys64/mingw64/lib/pkgconfig/fontconfig.pc
          C:/msys64/mingw64/share/fontconfig/
          C:/msys64/mingw64/share/gettext/its/fontconfig.its
          C:/msys64/mingw64/share/gettext/its/fontconfig.loc
          C:/msys64/mingw64/share/licenses/fontconfig/
          C:/msys64/mingw64/share/locale/zh_CN/LC_MESSAGES/fontconfig-conf.mo
          C:/msys64/mingw64/share/locale/zh_CN/LC_MESSAGES/fontconfig.mo
          C:/msys64/mingw64/share/xml/fontconfig/
          C:/msys64/mingw64/var/cache/fontconfig/

          C:/msys64/mingw64/bin/libfreeglut.dll
          C:/msys64/mingw64/include/GL/
          C:/msys64/mingw64/lib/cmake/FreeGLUT/
          C:/msys64/mingw64/lib/libfreeglut.dll.a
          C:/msys64/mingw64/lib/libfreeglut_static.a
          C:/msys64/mingw64/lib/pkgconfig/freeglut.pc

          C:/msys64/mingw64/bin/freetype-config
          C:/msys64/mingw64/bin/libfreetype-6.dll
          C:/msys64/mingw64/include/freetype2/
          C:/msys64/mingw64/lib/libfreetype.a
          C:/msys64/mingw64/lib/libfreetype.dll.a
          C:/msys64/mingw64/lib/pkgconfig/freetype2.pc
          C:/msys64/mingw64/share/aclocal/freetype2.m4
          C:/msys64/mingw64/share/licenses/freetype/

          C:/msys64/mingw64/bin/gif*.exe
          C:/msys64/mingw64/bin/libgif-7.dll
          C:/msys64/mingw64/include/gif_lib.h
          C:/msys64/mingw64/lib/libgif.a
          C:/msys64/mingw64/lib/libgif.dll.a

          C:/msys64/mingw64/bin/gdbus-codegen-script.py
          C:/msys64/mingw64/bin/gdbus-codegen.exe
          C:/msys64/mingw64/bin/gdbus.exe
          C:/msys64/mingw64/bin/gio-querymodules.exe
          C:/msys64/mingw64/bin/gio.exe
          C:/msys64/mingw64/bin/glib-*.exe
          C:/msys64/mingw64/bin/gobject-query.exe
          C:/msys64/mingw64/bin/gresource.exe
          C:/msys64/mingw64/bin/gsettings.exe
          C:/msys64/mingw64/bin/gspawn-win64-helper-console.exe
          C:/msys64/mingw64/bin/gspawn-win64-helper.exe
          C:/msys64/mingw64/bin/gtester-report-script.py
          C:/msys64/mingw64/bin/gtester-report.exe
          C:/msys64/mingw64/bin/libgio-2.0-0.dll
          C:/msys64/mingw64/bin/libglib-2.0-0.dll
          C:/msys64/mingw64/bin/libgmodule-2.0-0.dll
          C:/msys64/mingw64/bin/libgobject-2.0-0.dll
          C:/msys64/mingw64/bin/libgthread-2.0-0.dll
          C:/msys64/mingw64/include/gio-win32-2.0/
          C:/msys64/mingw64/include/glib-2.0/
          C:/msys64/mingw64/lib/glib-2.0/
          C:/msys64/mingw64/lib/libgio-2.0.a
          C:/msys64/mingw64/lib/libgio-2.0.dll.a
          C:/msys64/mingw64/lib/libglib-2.0.a
          C:/msys64/mingw64/lib/libglib-2.0.dll.a
          C:/msys64/mingw64/lib/libgmodule-2.0.a
          C:/msys64/mingw64/lib/libgmodule-2.0.dll.a
          C:/msys64/mingw64/lib/libgobject-2.0.a
          C:/msys64/mingw64/lib/libgobject-2.0.dll.a
          C:/msys64/mingw64/lib/libgthread-2.0.a
          C:/msys64/mingw64/lib/libgthread-2.0.dll.a
          C:/msys64/mingw64/lib/pkgconfig/gio-2.0.pc
          C:/msys64/mingw64/lib/pkgconfig/gio-windows-2.0.pc
          C:/msys64/mingw64/lib/pkgconfig/glib-2.0.pc
          C:/msys64/mingw64/lib/pkgconfig/gmodule-2.0.pc
          C:/msys64/mingw64/lib/pkgconfig/gmodule-export-2.0.pc
          C:/msys64/mingw64/lib/pkgconfig/gmodule-no-export-2.0.pc
          C:/msys64/mingw64/lib/pkgconfig/gobject-2.0.pc
          C:/msys64/mingw64/lib/pkgconfig/gthread-2.0.pc
          C:/msys64/mingw64/share/aclocal/glib-2.0.m4
          C:/msys64/mingw64/share/aclocal/glib-gettext.m4
          C:/msys64/mingw64/share/aclocal/gsettings.m4
          C:/msys64/mingw64/share/gettext/its/gschema.its
          C:/msys64/mingw64/share/gettext/its/gschema.loc
          C:/msys64/mingw64/share/glib-2.0/
          C:/msys64/mingw64/share/licenses/glib2/
          C:/msys2/usr/share/libalpm/

          C:/msys64/mingw64/bin/gr2fonttest.exe
          C:/msys64/mingw64/bin/libgraphite2.dll
          C:/msys64/mingw64/include/graphite2/
          C:/msys64/mingw64/lib/libgraphite2.a
          C:/msys64/mingw64/lib/libgraphite2.dll.a
          C:/msys64/mingw64/lib/pkgconfig/graphite2.pc
          C:/msys64/mingw64/share/graphite2/
          C:/msys64/mingw64/share/licenses/graphite2/

          C:/msys64/mingw64/bin/hb-*.exe
          C:/msys64/mingw64/bin/hb-*.exe
          C:/msys64/mingw64/bin/hb-*.exe
          C:/msys64/mingw64/bin/hb-*.exe
          C:/msys64/mingw64/bin/libharfbuzz*.dll
          C:/msys64/mingw64/bin/libharfbuzz*.dll
          C:/msys64/mingw64/bin/libharfbuzz*.dll
          C:/msys64/mingw64/bin/libharfbuzz*.dll
          C:/msys64/mingw64/include/harfbuzz/
          C:/msys64/mingw64/lib/cmake/harfbuzz/
          C:/msys64/mingw64/lib/girepository-1.0/HarfBuzz-0.0.typelib
          C:/msys64/mingw64/lib/libharfbuzz*.a
          C:/msys64/mingw64/lib/libharfbuzz*.dll.a
          C:/msys64/mingw64/lib/pkgconfig/harfbuzz*.pc
          C:/msys64/mingw64/share/gir-1.0/HarfBuzz-0.0.gir
          C:/msys64/mingw64/share/licenses/harfbuzz/

          C:/msys64/mingw64/bin/derb.exe
          C:/msys64/mingw64/bin/genbrk.exe
          C:/msys64/mingw64/bin/gencfu.exe
          C:/msys64/mingw64/bin/gencnval.exe
          C:/msys64/mingw64/bin/gendict.exe
          C:/msys64/mingw64/bin/genrb.exe
          C:/msys64/mingw64/bin/icu-config
          C:/msys64/mingw64/bin/icuinfo.exe
          C:/msys64/mingw64/bin/libicudt67.dll
          C:/msys64/mingw64/bin/libicuin67.dll
          C:/msys64/mingw64/bin/libicuio67.dll
          C:/msys64/mingw64/bin/libicutest67.dll
          C:/msys64/mingw64/bin/libicutu67.dll
          C:/msys64/mingw64/bin/libicuuc67.dll
          C:/msys64/mingw64/bin/makeconv.exe
          C:/msys64/mingw64/bin/pkgdata.exe
          C:/msys64/mingw64/bin/uconv.exe
          C:/msys64/mingw64/include/unicode/
          C:/msys64/mingw64/lib/icu/
          C:/msys64/mingw64/lib/libicu*.a
          C:/msys64/mingw64/lib/libicu*.dll.a
          C:/msys64/mingw64/lib/pkgconfig/icu-i18n.pc
          C:/msys64/mingw64/lib/pkgconfig/icu-io.pc
          C:/msys64/mingw64/lib/pkgconfig/icu-uc.pc
          C:/msys64/mingw64/sbin/escapesrc.exe
          C:/msys64/mingw64/sbin/genccode.exe
          C:/msys64/mingw64/sbin/gencmn.exe
          C:/msys64/mingw64/sbin/gennorm2.exe
          C:/msys64/mingw64/sbin/gensprep.exe
          C:/msys64/mingw64/sbin/icupkg.exe
          C:/msys64/mingw64/share/icu/

          C:/msys64/mingw64/bin/imgcmp.exe
          C:/msys64/mingw64/bin/imginfo.exe
          C:/msys64/mingw64/bin/jasper.exe
          C:/msys64/mingw64/bin/libjasper-4.dll
          C:/msys64/mingw64/include/jasper/
          C:/msys64/mingw64/lib/libjasper.a
          C:/msys64/mingw64/lib/libjasper.dll.a
          C:/msys64/mingw64/lib/pkgconfig/jasper.pc
          C:/msys64/mingw64/share/licenses/jasper/

          C:/msys64/mingw64/bin/jpgicc.exe
          C:/msys64/mingw64/bin/liblcms2-2.dll
          C:/msys64/mingw64/bin/linkicc.exe
          C:/msys64/mingw64/bin/psicc.exe
          C:/msys64/mingw64/bin/tificc.exe
          C:/msys64/mingw64/bin/transicc.exe
          C:/msys64/mingw64/include/lcms2.h
          C:/msys64/mingw64/include/lcms2_plugin.h
          C:/msys64/mingw64/lib/liblcms2.a
          C:/msys64/mingw64/lib/liblcms2.dll.a
          C:/msys64/mingw64/lib/pkgconfig/lcms2.pc

          C:/msys64/mingw64/bin/dumpsexp.exe
          C:/msys64/mingw64/bin/hmac256.exe
          C:/msys64/mingw64/bin/libgcrypt-20.dll
          C:/msys64/mingw64/bin/libgcrypt-config
          C:/msys64/mingw64/bin/mpicalc.exe
          C:/msys64/mingw64/include/gcrypt.h
          C:/msys64/mingw64/lib/libgcrypt.a
          C:/msys64/mingw64/lib/libgcrypt.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libgcrypt.pc
          C:/msys64/mingw64/share/aclocal/libgcrypt.m4
          C:/msys64/mingw64/share/licenses/libgcrypt/

          C:/msys64/mingw64/bin/gpg-error-config
          C:/msys64/mingw64/bin/gpg-error.exe
          C:/msys64/mingw64/bin/gpgrt-config
          C:/msys64/mingw64/bin/libgpg-error-0.dll
          C:/msys64/mingw64/bin/yat2m.exe
          C:/msys64/mingw64/include/gpg-error.h
          C:/msys64/mingw64/include/gpgrt.h
          C:/msys64/mingw64/lib/libgpg-error.a
          C:/msys64/mingw64/lib/libgpg-error.dll.a
          C:/msys64/mingw64/lib/pkgconfig/gpg-error.pc
          C:/msys64/mingw64/share/aclocal/gpg-error.m4
          C:/msys64/mingw64/share/aclocal/gpgrt.m4
          C:/msys64/mingw64/share/common-lisp/
          C:/msys64/mingw64/share/libgpg-error/
          C:/msys64/mingw64/share/licenses/libgpg-error/

          C:/msys64/mingw64/bin/cjpeg.exe
          C:/msys64/mingw64/bin/djpeg.exe
          C:/msys64/mingw64/bin/jpegtran.exe
          C:/msys64/mingw64/bin/libjpeg-8.dll
          C:/msys64/mingw64/bin/libturbojpeg.dll
          C:/msys64/mingw64/bin/rdjpgcom.exe
          C:/msys64/mingw64/bin/tjbench.exe
          C:/msys64/mingw64/bin/wrjpgcom.exe
          C:/msys64/mingw64/include/jconfig.h
          C:/msys64/mingw64/include/jerror.h
          C:/msys64/mingw64/include/jinclude.h
          C:/msys64/mingw64/include/jmorecfg.h
          C:/msys64/mingw64/include/jpeglib.h
          C:/msys64/mingw64/include/transupp.h
          C:/msys64/mingw64/include/turbojpeg.h
          C:/msys64/mingw64/lib/libjpeg.a
          C:/msys64/mingw64/lib/libjpeg.dll.a
          C:/msys64/mingw64/lib/libturbojpeg.a
          C:/msys64/mingw64/lib/libturbojpeg.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libjpeg.pc
          C:/msys64/mingw64/lib/pkgconfig/libturbojpeg.pc
          C:/msys64/mingw64/share/licenses/libjpeg-turbo/

          C:/msys64/mingw64/bin/libmng-2.dll
          C:/msys64/mingw64/include/libmng.h
          C:/msys64/mingw64/include/libmng_conf.h
          C:/msys64/mingw64/include/libmng_types.h
          C:/msys64/mingw64/lib/libmng.a
          C:/msys64/mingw64/lib/libmng.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libmng.pc
          C:/msys64/mingw64/share/mng-2.0/

          C:/msys64/mingw64/bin/libpng-config
          C:/msys64/mingw64/bin/libpng16-16.dll
          C:/msys64/mingw64/bin/libpng16-config
          C:/msys64/mingw64/bin/png-fix-itxt.exe
          C:/msys64/mingw64/bin/png2pnm-static.exe
          C:/msys64/mingw64/bin/png2pnm.exe
          C:/msys64/mingw64/bin/pngfix.exe
          C:/msys64/mingw64/bin/pnm2png-static.exe
          C:/msys64/mingw64/bin/pnm2png.exe
          C:/msys64/mingw64/include/libpng16/
          C:/msys64/mingw64/include/png.h
          C:/msys64/mingw64/include/pngconf.h
          C:/msys64/mingw64/include/pnglibconf.h
          C:/msys64/mingw64/lib/libpng.a
          C:/msys64/mingw64/lib/libpng.dll.a
          C:/msys64/mingw64/lib/libpng16.a
          C:/msys64/mingw64/lib/libpng16.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libpng.pc
          C:/msys64/mingw64/lib/pkgconfig/libpng16.pc
          C:/msys64/mingw64/share/licenses/libpng/

          C:/msys64/mingw64/bin/fax2ps.exe
          C:/msys64/mingw64/bin/fax2tiff.exe
          C:/msys64/mingw64/bin/libtiff-5.dll
          C:/msys64/mingw64/bin/libtiffxx-5.dll
          C:/msys64/mingw64/bin/pal2rgb.exe
          C:/msys64/mingw64/bin/ppm2tiff.exe
          C:/msys64/mingw64/bin/raw2tiff.exe
          C:/msys64/mingw64/bin/tiff*.exe
          C:/msys64/mingw64/include/tif*.h
          C:/msys64/mingw64/lib/libtiff.a
          C:/msys64/mingw64/lib/libtiff.dll.a
          C:/msys64/mingw64/lib/libtiffxx.a
          C:/msys64/mingw64/lib/libtiffxx.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libtiff-4.pc
          C:/msys64/mingw64/share/licenses/libtiff/

          C:/msys64/mingw64/bin/cwebp.exe
          C:/msys64/mingw64/bin/dwebp.exe
          C:/msys64/mingw64/bin/gif2webp.exe
          C:/msys64/mingw64/bin/img2webp.exe
          C:/msys64/mingw64/bin/libwebp-7.dll
          C:/msys64/mingw64/bin/libwebpdecoder-3.dll
          C:/msys64/mingw64/bin/libwebpdemux-2.dll
          C:/msys64/mingw64/bin/libwebpmux-3.dll
          C:/msys64/mingw64/bin/webpinfo.exe
          C:/msys64/mingw64/bin/webpmux.exe
          C:/msys64/mingw64/include/webp/
          C:/msys64/mingw64/lib/libwebp*.a
          C:/msys64/mingw64/lib/libwebp*.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libwebp*.pc

          C:/msys64/mingw64/bin/libxml2-2.dll
          C:/msys64/mingw64/bin/xml2-config
          C:/msys64/mingw64/bin/xmlcatalog.exe
          C:/msys64/mingw64/bin/xmllint.exe
          C:/msys64/mingw64/include/libxml2/
          C:/msys64/mingw64/lib/cmake/libxml2/
          C:/msys64/mingw64/lib/libxml2.a
          C:/msys64/mingw64/lib/libxml2.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libxml-2.0.pc
          C:/msys64/mingw64/lib/python3.8/site-packages/drv_libxml2.py
          C:/msys64/mingw64/lib/python3.8/site-packages/libxml2.py
          C:/msys64/mingw64/lib/python3.8/site-packages/libxml2mod.dll.a
          C:/msys64/mingw64/lib/python3.8/site-packages/libxml2mod.pyd
          C:/msys64/mingw64/lib/xml2Conf.sh
          C:/msys64/mingw64/share/aclocal/libxml.m4
          C:/msys64/mingw64/share/licenses/libxml2/

          C:/msys64/mingw64/bin/libexslt-0.dll
          C:/msys64/mingw64/bin/libxslt-1.dll
          C:/msys64/mingw64/bin/xslt-config
          C:/msys64/mingw64/bin/xsltproc.exe
          C:/msys64/mingw64/include/libexslt/
          C:/msys64/mingw64/include/libxslt/
          C:/msys64/mingw64/lib/libexslt.a
          C:/msys64/mingw64/lib/libexslt.dll.a
          C:/msys64/mingw64/lib/libxslt-plugins/
          C:/msys64/mingw64/lib/libxslt.a
          C:/msys64/mingw64/lib/libxslt.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libexslt.pc
          C:/msys64/mingw64/lib/pkgconfig/libxslt.pc
          C:/msys64/mingw64/lib/xsltConf.sh
          C:/msys64/mingw64/share/aclocal/libxslt.m4

          C:/msys64/mingw64/bin/libminizip-1.dll
          C:/msys64/mingw64/include/minizip/
          C:/msys64/mingw64/lib/cmake/minizip-exports-release.cmake
          C:/msys64/mingw64/lib/cmake/minizip-exports.cmake
          C:/msys64/mingw64/lib/libminizip.a
          C:/msys64/mingw64/lib/libminizip.dll.a
          C:/msys64/mingw64/lib/pkgconfig/minizip.pc

          C:/msys64/mingw64/bin/altonegen.exe
          C:/msys64/mingw64/bin/libopenal-1.dll
          C:/msys64/mingw64/bin/makemhr.exe
          C:/msys64/mingw64/bin/openal-info.exe
          C:/msys64/mingw64/include/AL/
          C:/msys64/mingw64/lib/cmake/OpenAL/
          C:/msys64/mingw64/lib/libopenal.a
          C:/msys64/mingw64/lib/libopenal.dll.a
          C:/msys64/mingw64/lib/pkgconfig/openal.pc
          C:/msys64/mingw64/share/openal/

          C:/msys64/mingw64/bin/libpcre*.dll
          C:/msys64/mingw64/bin/pcre-config
          C:/msys64/mingw64/bin/pcregrep.exe
          C:/msys64/mingw64/bin/pcretest.exe
          C:/msys64/mingw64/include/pcre*.h
          C:/msys64/mingw64/lib/libpcre*.a
          C:/msys64/mingw64/lib/libpcre*.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libpcre*.pc
          C:/msys64/mingw64/share/licenses/pcre/

          C:/msys64/mingw64/bin/libpcre2*.dll
          C:/msys64/mingw64/bin/pcre2-config
          C:/msys64/mingw64/bin/pcre2grep.exe
          C:/msys64/mingw64/bin/pcre2test.exe
          C:/msys64/mingw64/include/pcre2.h
          C:/msys64/mingw64/include/pcre2posix.h
          C:/msys64/mingw64/lib/libpcre2*.a
          C:/msys64/mingw64/lib/libpcre2*.dll.a
          C:/msys64/mingw64/lib/pkgconfig/libpcre2*.pc

          C:/msys64/mingw64/include/vulkan/
          C:/msys64/mingw64/share/licenses/vulkan-headers/
          C:/msys64/mingw64/share/vulkan/

          C:/msys64/mingw64/bin/libvulkan-1.dll
          C:/msys64/mingw64/lib/libvulkan.dll.a
          C:/msys64/mingw64/lib/pkgconfig/vulkan.pc
          C:/msys64/mingw64/share/licenses/vulkan-loader/

          C:/msys64/mingw64/bin/edit.dll
          C:/msys64/mingw64/bin/edit_test.exe
          C:/msys64/mingw64/bin/edit_test_dll.exe
          C:/msys64/mingw64/include/editline/
          C:/msys64/mingw64/lib/libedit.dll.a
          C:/msys64/mingw64/lib/libedit_static.a
          C:/msys64/mingw64/lib/pkgconfig/wineditline.pc
          C:/msys64/mingw64/share/licenses/wineditline/

          C:/msys64/mingw64/bin/cxpm-noX.exe
          C:/msys64/mingw64/bin/libXpm-noX4.dll
          C:/msys64/mingw64/include/X11/simx.h
          C:/msys64/mingw64/include/X11/xpm.h
          C:/msys64/mingw64/lib/libXpm.a
          C:/msys64/mingw64/lib/libXpm.dll.a
          C:/msys64/mingw64/lib/pkgconfig/xpm.pc

          C:/msys64/mingw64/bin/libzzip*.dll
          C:/msys64/mingw64/bin/unzip-mem.exe
          C:/msys64/mingw64/bin/unzzip*.exe
          C:/msys64/mingw64/bin/zz*.exe
          C:/msys64/mingw64/include/SDL_rwops_zzip/
          C:/msys64/mingw64/include/zzip-io.h
          C:/msys64/mingw64/include/zzip.h
          C:/msys64/mingw64/include/zzip/
          C:/msys64/mingw64/lib/libzzip*.a
          C:/msys64/mingw64/lib/libzzip*.dll.a
          C:/msys64/mingw64/lib/pkgconfig/SDL_rwops_zzip.pc
          C:/msys64/mingw64/lib/pkgconfig/zzip*.pc
          C:/msys64/mingw64/share/aclocal/zziplib.m4

          C:/msys64/mingw64/bin/balsam.exe
          C:/msys64/mingw64/bin/canbusutil.exe
          C:/msys64/mingw64/bin/dumpcpp.exe
          C:/msys64/mingw64/bin/dumpdoc.exe
          C:/msys64/mingw64/bin/fixqt4headers.pl
          C:/msys64/mingw64/bin/idc.exe
          C:/msys64/mingw64/bin/lconvert.exe
          C:/msys64/mingw64/bin/linguist.exe
          C:/msys64/mingw64/bin/lprodump.exe
          C:/msys64/mingw64/bin/lrelease-pro.exe
          C:/msys64/mingw64/bin/lrelease.exe
          C:/msys64/mingw64/bin/lupdate-pro.exe
          C:/msys64/mingw64/bin/lupdate.exe
          C:/msys64/mingw64/bin/meshdebug.exe
          C:/msys64/mingw64/bin/moc.exe
          C:/msys64/mingw64/bin/pixeltool.exe
          C:/msys64/mingw64/bin/qcollectiongenerator.exe
          C:/msys64/mingw64/bin/qdbus.exe
          C:/msys64/mingw64/bin/qdbuscpp2xml.exe
          C:/msys64/mingw64/bin/qdbusviewer.exe
          C:/msys64/mingw64/bin/qdbusxml2cpp.exe
          C:/msys64/mingw64/bin/qdistancefieldgenerator.exe
          C:/msys64/mingw64/bin/qdoc.exe
          C:/msys64/mingw64/bin/qgltf.exe
          C:/msys64/mingw64/bin/qhelpgenerator.exe
          C:/msys64/mingw64/bin/qlalr.exe
          C:/msys64/mingw64/bin/qmake.exe
          C:/msys64/mingw64/bin/qscxmlc.exe
          C:/msys64/mingw64/bin/Qt5Core.dll
          C:/msys64/mingw64/bin/Qt5Gui.dll
          C:/msys64/mingw64/bin/Qt5Widgets.dll
          C:/msys64/mingw64/bin/qtattributionsscanner.exe
          C:/msys64/mingw64/bin/qtdiag.exe
          C:/msys64/mingw64/bin/qtpaths.exe
          C:/msys64/mingw64/bin/qtplugininfo.exe
          C:/msys64/mingw64/bin/qvkgen.exe
          C:/msys64/mingw64/bin/rcc.exe
          C:/msys64/mingw64/bin/repc.exe
          C:/msys64/mingw64/bin/syncqt.pl
          C:/msys64/mingw64/bin/testcon.exe
          C:/msys64/mingw64/bin/tracegen.exe
          C:/msys64/mingw64/bin/uic.exe
          C:/msys64/mingw64/bin/windeployqt.exe
          C:/msys64/mingw64/bin/xmlpatterns.exe
          C:/msys64/mingw64/bin/xmlpatternsvalidator.exe
          C:/msys64/mingw64/include/ActiveQt/
          C:/msys64/mingw64/include/QtCore/
          C:/msys64/mingw64/include/QtGui/
          C:/msys64/mingw64/include/QtWidgets/
          C:/msys64/mingw64/lib/cmake/Qt5*/
          C:/msys64/mingw64/lib/libQt5Core.dll.a
          C:/msys64/mingw64/lib/libQt5Gui.dll.a
          C:/msys64/mingw64/lib/libQt5Widgets.dll.a
          C:/msys64/mingw64/lib/libqtmain.a
          C:/msys64/mingw64/lib/metatypes/qt5core_metatypes.json
          C:/msys64/mingw64/lib/metatypes/qt5gui_metatypes.json
          C:/msys64/mingw64/lib/metatypes/qt5widgets_metatypes.json
          C:/msys64/mingw64/lib/pkgconfig/Qt5*.pc
          C:/msys64/mingw64/lib/Qt5*.prl
          C:/msys64/mingw64/lib/qtmain.prl
          C:/msys64/mingw64/share/licenses/qt5/
          C:/msys64/mingw64/share/qt5/mkspecs/
          C:/msys64/mingw64/share/qt5/phrasebooks/
          C:/msys64/mingw64/share/qt5/plugins/
          C:/msys64/mingw64/share/qt5/translations/
        key: ${{ runner.os }}-mingw64-${{ env.MINGW64_CACHE_VERSION }}

    - name: Cyrus SASL (Windows)
      if: ${{ runner.os == 'Windows' && steps.cache_mingw64_windows.outputs.cache-hit != 'true' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -mingw64 -shell sh {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-cyrus-sasl

    - name: Cyrus SASL cache (Linux & macOS)
      uses: actions/cache@v2
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      id: cache_cyrus_sasl_unix
      with:
        path: ${{ env.ROOT_PATH }}/cyrus-sasl-install
        key: ${{ runner.os }}-cyrus-sasl-${{ env.CYRUS_SASL_VERSION }}

    - name: Cyrus SASL (Linux & macOS)
      if: ${{ (runner.os == 'Linux' || runner.os == 'macOS') && steps.cache_cyrus_sasl_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        sasl_version = os.environ['CYRUS_SASL_VERSION']

        sasl_source_dir  = os.path.normpath(os.path.join(root, "cyrus-sasl-{}".format(sasl_version)))
        sasl_install_dir = os.path.normpath(os.path.join(root, "${{ env.CYRUS_SASL_INSTALL_PATH }}"))
        os.mkdir(sasl_install_dir)

        sasl_url = "https://github.com/cyrusimap/cyrus-sasl/releases/download/cyrus-sasl-{}/cyrus-sasl-{}.tar.gz".format(sasl_version, sasl_version)
        open("sasl.tar.gz", "wb").write(requests.get(sasl_url, allow_redirects=True).content)
        execute_command("7z x sasl.tar.gz -so | 7z x -si -ttar")

        os.chdir(sasl_source_dir)

        execute_command("chmod +x ./configure")
        execute_command("./configure --prefix={}".format(sasl_install_dir))
        execute_command("chmod +x ./config/install-sh")
        execute_command("make -j2")
        execute_command("sudo make install")  # MacOS requires sudo to copy files to /Library/Frameworks/
        os.chdir(repo)

    - name: Yaml CPP (Windows)
      if: ${{ runner.os == 'Windows' && steps.cache_mingw64_windows.outputs.cache-hit != 'true' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -mingw64 -shell sh {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-yaml-cpp

    - name: Yaml CPP cache (Linux & macOS)
      uses: actions/cache@v2
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      id: cache_yaml_cpp_unix
      with:
        path: ${{ env.ROOT_PATH }}/yaml-cpp-install
        key: ${{ runner.os }}-yaml-cpp-${{ env.YAML_CPP_VERSION }}

    - name: Yaml CPP (Linux & macOS)
      if: ${{ (runner.os == 'Linux' || runner.os == 'macOS') && steps.cache_yaml_cpp_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        os.chdir(root)

        yaml_version = os.environ['YAML_CPP_VERSION']

        yaml_source_dir  = os.path.normpath(os.path.join(root, "yaml-cpp-yaml-cpp-{}".format(yaml_version)))
        yaml_install_dir = os.path.normpath(os.path.join(root, "${{ env.YAML_CPP_INSTALL_PATH }}"))
        os.mkdir(yaml_install_dir)

        yaml_url = "https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-{}.tar.gz".format(yaml_version)
        open("yaml.tar.gz", "wb").write(requests.get(yaml_url, allow_redirects=True).content)
        execute_command("7z x yaml.tar.gz -so | 7z x -si -ttar")

        os.chdir(yaml_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} -DYAML_BUILD_SHARED_LIBS=ON "
                       "-DYAML_CPP_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX={} "
                       ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                  os.path.join(root, ninja_tool_path, "ninja"),
                                  yaml_install_dir))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))
        os.chdir(repo)

    - name: Qt5 (Windows)
      if: ${{ runner.os == 'Windows' && steps.cache_mingw64_windows.outputs.cache-hit != 'true' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -mingw64 -shell sh {0}
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-qt5

    - name: Qt5 cache (Linux & macOS)
      uses: actions/cache@v2
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      id: cache_qt_unix
      with:
        path: ${{ env.ROOT_PATH }}/qt-install
        key: ${{ runner.os }}-qt-qtbase-qttools-${{ env.QT_VERSION }}

    - name: Qt5 (Linux & macOS)
      if: ${{ (runner.os == 'Linux' || runner.os == 'macOS') && steps.cache_qt_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        qt_install_dir = os.path.normpath(os.path.join(root, "${{ env.QT_INSTALL_PATH }}"))
        os.mkdir(qt_install_dir)

        qt_short_version = os.environ['QT_SHORT_VERSION']
        qt_version = os.environ['QT_VERSION']

        qtbase_source_dir  = os.path.normpath(os.path.join(root, "qtbase-everywhere-src-{}".format(qt_version)))
        qtbase_url = "http://download.qt.io/official_releases/qt/{}/{}/submodules/qtbase-everywhere-src-{}.tar.xz".format(qt_short_version, qt_version, qt_version)
        open("qtbase.tar.xz", "wb").write(requests.get(qtbase_url, allow_redirects=True).content)
        execute_command("tar -xf qtbase.tar.xz")

        os.chdir(qtbase_source_dir)

        execute_command("chmod +x ./configure")
        execute_command("./configure -opensource -confirm-license -prefix {} -no-opengl -nomake examples -nomake tests".format(qt_install_dir))
        execute_command("make -j2")
        execute_command("make install")

        os.chdir(root)

        qttools_source_dir  = os.path.normpath(os.path.join(root, "qttools-everywhere-src-{}".format(qt_version)))
        qttools_url = "http://download.qt.io/official_releases/qt/{}/{}/submodules/qttools-everywhere-src-{}.tar.xz".format(qt_short_version, qt_version, qt_version)
        open("qttools.tar.xz", "wb").write(requests.get(qttools_url, allow_redirects=True).content)
        execute_command("tar -xf qttools.tar.xz")

        os.chdir(qttools_source_dir)

        execute_command("{}/bin/qmake qttools.pro".format(qt_install_dir))
        execute_command("make -j2")
        execute_command("make install")

        os.chdir(repo)

    - name: Configure (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -shell sh {0}
      run: |
        cp ${{ env.ROOT_PATH }}\\${{ env.NINJA_TOOL_PATH }}\\ninja.exe C:\\msys64\\mingw64\\bin\\ninja.exe
        ${{ env.CMAKE_TOOL_BINARY_PATH }}\\cmake \
        -G Ninja \
        -S . \
        -B build \
        -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
        -D CMAKE_RANLIB=/mingw64/bin/ranlib.exe \
        -D CMAKE_VERBOSE_MAKEFILE=ON \
        -D CMAKE_MAKE_PROGRAM=/mingw64/bin/ninja.exe \
        -D CMAKE_C_COMPILER=/mingw64/bin/gcc.exe \
        -D CMAKE_CXX_COMPILER=/mingw64/bin/g++.exe \
        -D CMAKE_AR=/mingw64/bin/ar.exe \
        -D CMAKE_LINKER=/mingw64/bin/ld.exe \
        -D CMAKE_DLLTOOL=/mingw64/bin/dlltool.exe \
        -D CMAKE_NM=/mingw64/bin/nm.exe \
        -D CMAKE_PREFIX_PATH=\
        ${{ env.ROOT_PATH }}\\${{ env.BOOST_INSTALL_PATH }} \
        -D CMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Configure (Linux & macOS)
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        ${{ env.CMAKE_TOOL_BINARY_PATH }}/cmake \
        -G Ninja \
        -D CMAKE_MAKE_PROGRAM=${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}/ninja \
        -S . \
        -B build \
        -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
        -D CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
        -D CMAKE_PREFIX_PATH=\
        "${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.YAML_CPP_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.QT_INSTALL_PATH }}" \
        -D CMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Initialize CodeQL (Linux)
      if: ${{ matrix.config.suffix == 'CodeQL' }}
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Build
      run: cmake --build build --target all

    - name: Perform CodeQL Analysis (Linux)
      if: ${{ matrix.config.suffix == 'CodeQL' }}
      uses: github/codeql-action/analyze@v1

    - name: Run tests
      run: cd build && ctest && cd ..

    - name: Install Strip
      run: cmake --install build --prefix install --strip

    - name: Copy required DLL (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        copy "C:\\msys64\\mingw64\\bin\\libstdc++-6.dll"            install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libgcc_s_seh-1.dll"         install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libwinpthread-1.dll"        install\\bin
        copy "C:\\msys64\\mingw64\\bin\\Qt5Core.dll"                install\\bin
        copy "C:\\msys64\\mingw64\\bin\\Qt5Gui.dll"                 install\\bin
        copy "C:\\msys64\\mingw64\\bin\\Qt5Widgets.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libicuin67.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libdouble-conversion.dll"   install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libicuuc67.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libzstd.dll"                install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libpcre2-16-0.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libicudt67.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libharfbuzz-0.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libpng16-16.dll"            install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libgraphite2.dll"           install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libglib-2.0-0.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libfreetype-6.dll"          install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libintl-8.dll"              install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libpcre-1.dll"              install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libbrotlidec.dll"           install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libbz2-1.dll"               install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libbrotlicommon.dll"        install\\bin
        copy "C:\\msys64\\mingw64\\bin\\libiconv-2.dll"             install\\bin
        copy "C:\\msys64\\mingw64\\bin\\zlib1.dll"                  install\\bin

    - name: Win Deploy Qt
      if: ${{ runner.os == 'Windows' }}
      shell: C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -shell sh {0}
      run: |
        windeployqt.exe --dir install/bin install/bin/melon-client-desktop.exe

    - name: Mac Deploy Qt
      if: ${{ runner.os == 'macOS' }}
      shell: sh {0}
      run: |
        $ROOT_PATH/$QT_INSTALL_PATH/bin/macdeployqt install/bin/melon-client-desktop.app

    - name: Copy required dylibs (macOS)
      if: ${{ runner.os == 'macOS' }}
      shell: sh {0}
      run: |
        cp $ROOT_PATH/$CYRUS_SASL_INSTALL_PATH/lib/libsasl2.3.dylib install/bin/libsasl2.3.dylib
        install_name_tool -change $ROOT_PATH/$CYRUS_SASL_INSTALL_PATH/lib/libsasl2.3.dylib @executable_path/libsasl2.3.dylib install/bin/melon-auth

    - name: Tar files (Linux & macOS)
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run: tar -cvf install.tar ./install

    - name: Upload binaries (Windows)
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./install
        name: ${{ matrix.config.artifact }}

    - name: Upload binaries (Linux & macOS)
      if: ${{ (runner.os == 'Linux' && matrix.config.suffix == '') || runner.os == 'macOS' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./install.tar
        name: ${{ matrix.config.artifact }}

    - name: Prepare to run static analysis (Linux)
      if: ${{ matrix.config.suffix == 'PVS-Studio' || matrix.config.suffix == 'clang-tidy' }}
      run: mkdir reports

    - name: Install clang-tidy (Linux)
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      run: sudo apt-get install clang-tidy -y

    - name: Run clang-tidy (Linux)
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      run: run-clang-tidy -p=build -j=2 2>&1 | tee reports/clang-tidy-report.log

    - name: Install PVS-Studio (Linux)
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      shell: sh {0}
      run: |
        wget -q -O - https://files.viva64.com/etc/pubkey.txt | sudo apt-key add -
        sudo wget -O /etc/apt/sources.list.d/viva64.list https://files.viva64.com/etc/viva64.list
        sudo apt-get update
        sudo apt-get install pvs-studio

    - name: Run PVS-Studio (Linux)
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      env:
        PVS_NAME: ${{ secrets.PVS_NAME }}
        PVS_KEY: ${{ secrets.PVS_KEY }}
      shell: sh {0}
      run: |
        pvs-studio-analyzer credentials $PVS_NAME $PVS_KEY
        pvs-studio-analyzer analyze -e *melon/build* -j2 -f build/compile_commands.json
        plog-converter -t fullhtml -o reports/pvs-report -a GA:1,2,3 PVS-Studio.log

    - name: Upload static analysis results (Linux)
      if: ${{ matrix.config.suffix == 'PVS-Studio' || matrix.config.suffix == 'clang-tidy' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./reports
        name: static-analyzer-reports

    - name: Fail if clang-tidy found warnings (Linux)
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      shell: sh {0}
      run: |
        cat reports/clang-tidy-report.log | grep -E 'warning: |error: ' | grep -v 'melon/build'; status=$?; test $status -ne 0

    - name: Fail if PVS-Studio found warnings (Linux)
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      shell: sh {0}
      run: |
        plog-converter -t tasklist -a GA:1,2,3 -w PVS-Studio.log

  build-android:
    name: Android
    runs-on: ubuntu-20.04
    needs: build-core-server-client-desktop

    steps:
    - uses: actions/checkout@v2

    - name: Build debug apk
      shell: sh {0}
      run: |
        cd src/client-android
        gradle wrapper
        ./gradlew assembleDebug

    - name: Upload debug apk
      uses: actions/upload-artifact@v2
      with:
        path: ./src/client-android/app/build/outputs/apk/debug/app-debug.apk
        name: android-debug

  #release:
    #if: contains(github.ref, 'tags/v')
    #runs-on: ubuntu-latest
    #needs: build

    #steps:
    #- name: Create Release
      #id: create_release
      #uses: actions/create-release@v1.0.0
      #env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #with:
        #tag_name: ${{ github.ref }}
        #release_name: Release ${{ github.ref }}
        #draft: false
        #prerelease: false

    #- name: Store Release url
      #run: |
        #echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    #- uses: actions/upload-artifact@v1
      #with:
        #path: ./upload_url
        #name: upload_url

  #publish:
    #if: contains(github.ref, 'tags/v')
    #name: ${{ matrix.config.name }}
    #runs-on: ${{ matrix.config.os }}
    #strategy:
      #fail-fast: false
      #matrix:
        #config:
        #- {
            #name: "Windows Latest MinGW64", artifact: "Windows-MinGW64.tar.xz",
            #os: ubuntu-latest
          #}
        #- {
            #name: "Ubuntu Latest Clang", artifact: "Linux.tar.xz",
            #os: ubuntu-latest
          #}
        #- {
            #name: "MacOS Latest Clang", artifact: "MacOS.tar.xz",
            #os: ubuntu-latest
          #}
    #needs: release

    #steps:
    #- name: Download artifact
      #uses: actions/download-artifact@v1
      #with:
        #name: ${{ matrix.config.artifact }}
        #path: ./

    #- name: Download URL
      #uses: actions/download-artifact@v1
      #with:
        #name: upload_url
        #path: ./
    #- id: set_upload_url
      #run: |
        #upload_url=`cat ./upload_url`
        #echo ::set-output name=upload_url::$upload_url

    #- name: Upload to Release
      #id: upload_to_release
      #uses: actions/upload-release-asset@v1.0.1
      #env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #with:
        #upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        #asset_path: ./${{ matrix.config.artifact }}
        #asset_name: ${{ matrix.config.artifact }}
        #asset_content_type: application/x-gtar

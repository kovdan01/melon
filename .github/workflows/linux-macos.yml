name: Build Linux & macOS

on:
  push:
    branches: develop
  pull_request:
    branches: develop

jobs:
  build-core-server-client-desktop:
    name: ${{ format('{0} {1} {2}', matrix.config.prefix, matrix.config.build_type, matrix.config.suffix) }}
    runs-on: ${{ matrix.config.os }}
    env:
      CMAKE_TOOL_VERSION: "3.19.1"
      CMAKE_TOOL_PATH: "cmake-tool"
      NINJA_TOOL_VERSION: "1.10.2"
      NINJA_TOOL_PATH: "ninja-tool"
      BOOST_MAJOR: 1
      BOOST_MINOR: 75
      BOOST_BUILD: 0
      BOOST_INSTALL_PATH: "boost-install"
      CYRUS_SASL_VERSION: "2.1.27"
      CYRUS_SASL_INSTALL_PATH: "cyrus-sasl-install"
      YAML_CPP_VERSION: "0.6.3"
      YAML_CPP_INSTALL_PATH: "yaml-cpp-install"
      SQLPP11_VERSION: "0.60"
      SQLPP11_CONNECTOR_MYSQL_VERSION: "0.29"
      CHRONO_DATE_VERSION: "3.0.0"
      SQLPP11_INSTALL_PATH: "sqlpp11-install"
      QT_SHORT_VERSION: "5.15"
      QT_VERSION: "5.15.1"
      QT_INSTALL_PATH: "qt-install"
    strategy:
      fail-fast: true
      matrix:
        config:
        - {
            os: "ubuntu-20.04",
            prefix: "Linux",
            suffix: "",
            artifact: "all-release-linux",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
          }
        - {
            os: "ubuntu-20.04",
            prefix: "Linux",
            suffix: "CodeQL",
            artifact: "",
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
          }
        #- {
            #os: "ubuntu-20.04",
            #prefix: "Linux",
            #suffix: "PVS-Studio",
            #artifact: "",
            #build_type: "Debug",
            #cc: "clang",
            #cxx: "clang++",
          #}
        - {
            os: "ubuntu-20.04",
            prefix: "Linux",
            suffix: "clang-tidy",
            artifact: "",
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
          }
        - {
            os: "macos-latest",
            prefix: "macOS",
            suffix: "",
            artifact: "all-release-macos",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
          }

    steps:
    - uses: actions/checkout@v2

    - name: Set environment variables
      shell: python {0}
      run: |
        import os

        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))

        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo))
          env_file.write("ROOT_PATH={}\n".format(root))

          if "${{ runner.os }}" == "Linux":
            env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "bin")))
          elif "${{ runner.os }}" == "macOS":
            env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "CMake.app", "Contents", "bin")))

    - name: Install required python modules
      run: pip install requests

    - name: Install Clang and MariaDB (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get update -y
        sudo apt-get purge *mysql*
        sudo apt-get install clang -y
        sudo apt-get install mariadb-server libmariadb-dev libmariadb-dev-compat -y

    - name: Install MariaDB (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install mariadb

    - name: Ninja and CMake cache
      uses: actions/cache@v2
      id: cache_ninja_and_cmake
      with:
        path: |
          ${{ env.ROOT_PATH }}/${{ env.CMAKE_TOOL_PATH }}
          ${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}
        key: ${{ runner.os }}-ninja-${{ env.NINJA_TOOL_VERSION }}-cmake-${{ env.CMAKE_TOOL_VERSION }}

    - name: Download Ninja and CMake
      id: download_ninja_and_cmake
      if: ${{ steps.cache_ninja_and_cmake.outputs.cache-hit != 'true' }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        cmake_version = os.environ['CMAKE_TOOL_VERSION']
        ninja_version = os.environ['NINJA_TOOL_VERSION']
        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        if "${{ runner.os }}" == "Linux":
          ninja_suffix = "linux.zip"
          cmake_suffix = "Linux-x86_64.tar.gz"
          cmake_dir = "cmake-{}-Linux-x86_64".format(cmake_version)
        elif "${{ runner.os }}" == "macOS":
          ninja_suffix = "mac.zip"
          cmake_suffix = "Darwin-x86_64.tar.gz"
          cmake_dir = "cmake-{}-Darwin-x86_64".format(cmake_version)

        os.mkdir(ninja_tool_path)
        os.chdir(ninja_tool_path)
        ninja_url = "https://github.com/ninja-build/ninja/releases/download/v{}/ninja-{}".format(ninja_version, ninja_suffix)
        open("ninja.zip", "wb").write(requests.get(ninja_url, allow_redirects=True).content)
        execute_command("7z x ninja.zip")
        execute_command("chmod +x ninja")
        os.chdir(root)

        cmake_url = "https://github.com/Kitware/CMake/releases/download/v{}/cmake-{}-{}".format(cmake_version, cmake_version, cmake_suffix)

        open("cmake.tar.gz", "wb").write(requests.get(cmake_url, allow_redirects=True).content)
        execute_command("7z x cmake.tar.gz -so | 7z x -si -ttar")
        os.rename(cmake_dir, cmake_tool_path)
        execute_command("chmod +x {}/cmake".format(cmake_tool_binary_path))

        os.chdir(repo)

    - name: Boost cache
      uses: actions/cache@v2
      id: cache_boost
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}
        key: ${{ runner.os }}-boost-shared-only-${{ env.BOOST_MAJOR }}-${{ env.BOOST_MINOR }}-${{ env.BOOST_BUILD }}-context-exception-log-program_options-system

    - name: Boost
      id: boost
      if: ${{ steps.cache_boost.outputs.cache-hit != 'true' }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        boost_major = os.environ['BOOST_MAJOR']
        boost_minor = os.environ['BOOST_MINOR']
        boost_build = os.environ['BOOST_BUILD']

        boost_source_dir  = os.path.normpath(os.path.join(root, "boost_{}_{}_{}".format(boost_major, boost_minor, boost_build)))
        boost_install_dir = os.path.normpath(os.path.join(root, "${{ env.BOOST_INSTALL_PATH }}"))
        os.mkdir(boost_install_dir)

        boost_url = "https://dl.bintray.com/boostorg/release/{}.{}.{}/source/boost_{}_{}_{}.zip".format(boost_major, boost_minor, boost_build,
                                                                                                        boost_major, boost_minor, boost_build)
        open("boost.zip", "wb").write(requests.get(boost_url, allow_redirects=True).content)
        execute_command("7z x boost.zip")

        os.chdir(boost_source_dir)

        execute_command("patch -p1 < {}/3rd-party/ampi-0.0.0/patches/boost-1.75.0/asio-fix-outstanding-work-tracked-executor-move-assignment.patch".format(repo))
        execute_command("patch -p1 < {}/3rd-party/ampi-0.0.0/patches/boost-1.75.0/container-fix-141.patch".format(repo))
        execute_command("patch -p1 < {}/3rd-party/ampi-0.0.0/patches/boost-1.75.0/move-fix-35.patch".format(repo))
        execute_command("patch -p1 < {}/3rd-party/ampi-0.0.0/patches/boost-1.75.0/throw_exception-fix-BOOST_EXCEPTION_DISABLE.patch".format(repo))

        os.environ['CXX']='/usr/bin/clang++'
        execute_command("chmod +x ./bootstrap.sh")
        execute_command("chmod +x ./tools/build/src/engine/build.sh")

        execute_command("./bootstrap.sh --with-libraries=context,exception,log,program_options,system --with-toolset=clang")
        execute_command('echo "using clang : : ${CXX} : ;" > user-config.jam')
        execute_command('./b2 --ignore-site-config --user-config=./user-config.jam --prefix={} toolset=clang variant=release link=shared threading=multi install'.format(boost_install_dir))

        os.chdir(repo)

    - name: Cyrus SASL cache
      uses: actions/cache@v2
      id: cache_cyrus_sasl_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }}
        key: ${{ runner.os }}-cyrus-sasl-${{ env.CYRUS_SASL_VERSION }}

    - name: Cyrus SASL
      if: ${{ steps.cache_cyrus_sasl_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        sasl_version = os.environ['CYRUS_SASL_VERSION']

        sasl_source_dir  = os.path.normpath(os.path.join(root, "cyrus-sasl-{}".format(sasl_version)))
        sasl_install_dir = os.path.normpath(os.path.join(root, "${{ env.CYRUS_SASL_INSTALL_PATH }}"))
        os.mkdir(sasl_install_dir)

        sasl_url = "https://github.com/cyrusimap/cyrus-sasl/releases/download/cyrus-sasl-{}/cyrus-sasl-{}.tar.gz".format(sasl_version, sasl_version)
        open("sasl.tar.gz", "wb").write(requests.get(sasl_url, allow_redirects=True).content)
        execute_command("7z x sasl.tar.gz -so | 7z x -si -ttar")

        os.chdir(sasl_source_dir)

        execute_command("chmod +x ./configure")
        execute_command("./configure --prefix={}".format(sasl_install_dir))
        execute_command("chmod +x ./config/install-sh")
        execute_command("make -j2")
        execute_command("sudo make install")  # MacOS requires sudo to copy files to /Library/Frameworks/
        os.chdir(repo)

    - name: Yaml CPP cache
      uses: actions/cache@v2
      id: cache_yaml_cpp_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.YAML_CPP_INSTALL_PATH }}
        key: ${{ runner.os }}-yaml-cpp-${{ env.YAML_CPP_VERSION }}

    - name: Yaml CPP
      if: ${{ steps.cache_yaml_cpp_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        os.chdir(root)

        yaml_version = os.environ['YAML_CPP_VERSION']

        yaml_source_dir  = os.path.normpath(os.path.join(root, "yaml-cpp-yaml-cpp-{}".format(yaml_version)))
        yaml_install_dir = os.path.normpath(os.path.join(root, "${{ env.YAML_CPP_INSTALL_PATH }}"))
        os.mkdir(yaml_install_dir)

        yaml_url = "https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-{}.tar.gz".format(yaml_version)
        open("yaml.tar.gz", "wb").write(requests.get(yaml_url, allow_redirects=True).content)
        execute_command("7z x yaml.tar.gz -so | 7z x -si -ttar")

        os.chdir(yaml_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} -DYAML_BUILD_SHARED_LIBS=ON "
                       "-DYAML_CPP_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX={} "
                       ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                  os.path.join(root, ninja_tool_path, "ninja"),
                                  yaml_install_dir))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))
        os.chdir(repo)

    - name: SQLPP11 cache
      uses: actions/cache@v2
      id: cache_sqlpp11_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.SQLPP11_INSTALL_PATH }}
        key: ${{ runner.os }}-sqlpp11-${{ env.SQLPP11_VERSION }}-connector-mysql-${{ env.SQLPP11_CONNECTOR_MYSQL_VERSION }}

    - name: SQLPP11
      if: ${{ steps.cache_sqlpp11_unix.outputs.cache-hit != 'true' && runner.os != 'macOS' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        # sqlpp11 itself
        os.chdir(root)

        sqlpp11_version = os.environ['SQLPP11_VERSION']
        sqlpp11_source_dir  = os.path.normpath(os.path.join(root, "sqlpp11-{}".format(sqlpp11_version)))
        sqlpp11_install_dir = os.path.normpath(os.path.join(root, "${{ env.SQLPP11_INSTALL_PATH }}"))
        os.mkdir(sqlpp11_install_dir)

        sqlpp11_url = "https://github.com/rbock/sqlpp11/archive/{}.tar.gz".format(sqlpp11_version)
        open("sqlpp11.tar.gz", "wb").write(requests.get(sqlpp11_url, allow_redirects=True).content)
        execute_command("tar -xf sqlpp11.tar.gz")

        os.chdir(sqlpp11_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} -DCMAKE_BUILD_TYPE=Release "
                       "-DCMAKE_INSTALL_PREFIX={} -DCMAKE_PREFIX_PATH={} "
                       ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                  os.path.join(root, ninja_tool_path, "ninja"),
                                  sqlpp11_install_dir,
                                  os.path.join(root, os.environ['BOOST_INSTALL_PATH'])))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))

        # chrono date (sqlpp11 connector mysql dependency)
        os.chdir(root)

        chrono_date_version = os.environ['CHRONO_DATE_VERSION']
        chrono_date_source_dir  = os.path.normpath(os.path.join(root, "date-{}".format(chrono_date_version)))

        chrono_date_url = "https://github.com/HowardHinnant/date/archive/v{}.tar.gz".format(chrono_date_version)
        open("chrono_date.tar.gz", "wb").write(requests.get(chrono_date_url, allow_redirects=True).content)
        execute_command("tar -xf chrono_date.tar.gz")

        os.chdir(chrono_date_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} "
                       "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX={} "
                       ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                  os.path.join(root, ninja_tool_path, "ninja"),
                                  sqlpp11_install_dir))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))

        # sqlpp11 connector mysql
        os.chdir(root)

        sqlpp11_conn_version = os.environ['SQLPP11_CONNECTOR_MYSQL_VERSION']
        sqlpp11_conn_source_dir  = os.path.normpath(os.path.join(root, "sqlpp11-connector-mysql-{}".format(sqlpp11_conn_version)))

        sqlpp11_conn_url = "https://github.com/rbock/sqlpp11-connector-mysql/archive/{}.tar.gz".format(sqlpp11_conn_version)
        open("sqlpp11_conn.tar.gz", "wb").write(requests.get(sqlpp11_conn_url, allow_redirects=True).content)
        execute_command("tar -xf sqlpp11_conn.tar.gz")

        os.chdir(sqlpp11_conn_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} "
                       "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX={} -DCMAKE_PREFIX_PATH=/usr/local/Cellar/mariadb/10.5.8 "
                       "-DUSE_MARIADB=TRUE -DDATE_INCLUDE_DIR={}/include -DSQLPP11_INCLUDE_DIR={}/include "
                       ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                  os.path.join(root, ninja_tool_path, "ninja"),
                                  sqlpp11_install_dir, sqlpp11_install_dir, sqlpp11_install_dir))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))

        os.chdir(repo)

    - name: Qt5 cache
      uses: actions/cache@v2
      id: cache_qt_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.QT_INSTALL_PATH }}
        key: ${{ runner.os }}-qt-qtbase-qttools-${{ env.QT_VERSION }}

    - name: Qt5
      if: ${{ steps.cache_qt_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        qt_install_dir = os.path.normpath(os.path.join(root, "${{ env.QT_INSTALL_PATH }}"))
        os.mkdir(qt_install_dir)

        qt_short_version = os.environ['QT_SHORT_VERSION']
        qt_version = os.environ['QT_VERSION']

        qtbase_source_dir  = os.path.normpath(os.path.join(root, "qtbase-everywhere-src-{}".format(qt_version)))
        qtbase_url = "http://download.qt.io/official_releases/qt/{}/{}/submodules/qtbase-everywhere-src-{}.tar.xz".format(qt_short_version, qt_version, qt_version)
        open("qtbase.tar.xz", "wb").write(requests.get(qtbase_url, allow_redirects=True).content)
        execute_command("tar -xf qtbase.tar.xz")

        os.chdir(qtbase_source_dir)

        execute_command("chmod +x ./configure")
        execute_command("./configure -opensource -confirm-license -prefix {} -no-opengl -nomake examples -nomake tests".format(qt_install_dir))
        execute_command("make -j2")
        execute_command("make install")

        os.chdir(root)

        qttools_source_dir  = os.path.normpath(os.path.join(root, "qttools-everywhere-src-{}".format(qt_version)))
        qttools_url = "http://download.qt.io/official_releases/qt/{}/{}/submodules/qttools-everywhere-src-{}.tar.xz".format(qt_short_version, qt_version, qt_version)
        open("qttools.tar.xz", "wb").write(requests.get(qttools_url, allow_redirects=True).content)
        execute_command("tar -xf qttools.tar.xz")

        os.chdir(qttools_source_dir)

        execute_command("{}/bin/qmake qttools.pro".format(qt_install_dir))
        execute_command("make -j2")
        execute_command("make install")

        os.chdir(repo)

    - name: Configure
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        ${{ env.CMAKE_TOOL_BINARY_PATH }}/cmake \
        -G Ninja \
        -D CMAKE_MAKE_PROGRAM=${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}/ninja \
        -S . \
        -B build \
        -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
        -D CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
        -D SQLPP11_MYSQL_CONNECTOR_PREFIX="${{ env.ROOT_PATH }}/${{ env.SQLPP11_INSTALL_PATH }}" \
        -D CMAKE_PREFIX_PATH=\
        "${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.YAML_CPP_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.SQLPP11_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.QT_INSTALL_PATH }}" \
        -D CMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Initialize CodeQL
      if: ${{ matrix.config.suffix == 'CodeQL' }}
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Build
      run: cmake --build build --target all

    - name: Perform CodeQL Analysis
      if: ${{ matrix.config.suffix == 'CodeQL' }}
      uses: github/codeql-action/analyze@v1

    - name: Run tests
      run: cd build && ctest && cd ..

    - name: Install Strip
      run: cmake --install build --prefix install --strip

    - name: Mac Deploy Qt
      if: ${{ runner.os == 'macOS' }}
      shell: sh {0}
      run: |
        $ROOT_PATH/$QT_INSTALL_PATH/bin/macdeployqt install/bin/melon-client-desktop.app

    - name: Copy required dylibs
      if: ${{ runner.os == 'macOS' }}
      shell: sh {0}
      run: |
        cp $ROOT_PATH/$CYRUS_SASL_INSTALL_PATH/lib/libsasl2.3.dylib install/bin/libsasl2.3.dylib
        install_name_tool -change $ROOT_PATH/$CYRUS_SASL_INSTALL_PATH/lib/libsasl2.3.dylib @executable_path/libsasl2.3.dylib install/bin/melon-auth

    - name: Tar files
      run: tar -cvf install.tar ./install

    - name: Upload binaries
      if: ${{ matrix.config.suffix == '' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./install.tar
        name: ${{ matrix.config.artifact }}

    - name: Prepare to run static analysis
      if: ${{ matrix.config.suffix == 'PVS-Studio' || matrix.config.suffix == 'clang-tidy' }}
      run: mkdir reports

    - name: Install clang-tidy
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      run: sudo apt-get install clang-tidy -y

    - name: Run clang-tidy
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      run: run-clang-tidy -p=build -j=2 2>&1 | tee reports/clang-tidy-report.log

    - name: Install PVS-Studio
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      shell: sh {0}
      run: |
        wget -q -O - https://files.viva64.com/etc/pubkey.txt | sudo apt-key add -
        sudo wget -O /etc/apt/sources.list.d/viva64.list https://files.viva64.com/etc/viva64.list
        sudo apt-get update
        sudo apt-get install pvs-studio

    - name: Run PVS-Studio
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      env:
        PVS_NAME: ${{ secrets.PVS_NAME }}
        PVS_KEY: ${{ secrets.PVS_KEY }}
      shell: sh {0}
      run: |
        pvs-studio-analyzer credentials $PVS_NAME $PVS_KEY
        pvs-studio-analyzer analyze -e *melon/build/src* -j2 -f build/compile_commands.json
        plog-converter -t fullhtml -o reports/pvs-report -a GA:1,2,3 PVS-Studio.log

    - name: Upload static analysis results
      if: ${{ matrix.config.suffix == 'PVS-Studio' || matrix.config.suffix == 'clang-tidy' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./reports
        name: static-analyzer-reports

    - name: Fail if clang-tidy found warnings
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      shell: sh {0}
      run: |
        cat reports/clang-tidy-report.log | grep -E 'warning: |error: ' | grep -v 'melon/build/src'; status=$?; test $status -ne 0

    - name: Fail if PVS-Studio found warnings
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      shell: sh {0}
      run: |
        plog-converter -t tasklist -a GA:1,2,3 -w PVS-Studio.log

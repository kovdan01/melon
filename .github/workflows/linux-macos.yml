name: Build Linux & macOS

on:
  push:
    branches: develop
  pull_request:
    branches: develop

jobs:
  build-core-server-client-desktop:
    name: ${{ format('{0} {1} {2}', matrix.config.prefix, matrix.config.build_type, matrix.config.suffix) }}
    runs-on: ${{ matrix.config.os }}
    env:
      CMAKE_TOOL_VERSION: "3.19.1"
      CMAKE_TOOL_PATH: "cmake-tool"
      NINJA_TOOL_VERSION: "1.10.2"
      NINJA_TOOL_PATH: "ninja-tool"
      BOOST_MAJOR: 1
      BOOST_MINOR: 76
      BOOST_BUILD: 0
      BOOST_INSTALL_PATH: "boost-install"
      THIRD_PARTY_INSTALL_PATH: "3rd-party-install"
      CYRUS_SASL_VERSION: "2.1.27"
      CYRUS_SASL_INSTALL_PATH: "cyrus-sasl-install"
      YAML_CPP_VERSION: "0.6.3"
      YAML_CPP_INSTALL_PATH: "yaml-cpp-install"
      SQLPP11_VERSION: "0.60"
      SQLPP11_CONNECTOR_MYSQL_VERSION: "0.29"
      CHRONO_DATE_VERSION: "3.0.0"
      SQLPP11_INSTALL_PATH: "sqlpp11-install"
      MSGPACK_VERSION: "3.3.0"
      MSGPACK_INSTALL_PATH: "msgpack-install"
      CATCH2_VERSION: "2.13.4"
      CATCH2_INSTALL_PATH: "catch2-install"
      QT_SHORT_VERSION: "5.15"
      QT_VERSION: "5.15.1"
      QT_INSTALL_PATH: "qt-install"
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            os: "ubuntu-latest",
            prefix: "Linux",
            suffix: "",
            artifact: "all-release-linux",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            os: "ubuntu-latest",
            prefix: "Linux",
            suffix: "CodeQL",
            artifact: "",
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            os: "ubuntu-latest",
            prefix: "Linux",
            suffix: "PVS-Studio",
            artifact: "all-debug-linux",
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            os: "ubuntu-latest",
            prefix: "Linux",
            suffix: "clang-tidy",
            artifact: "",
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            os: "macos-latest",
            prefix: "macOS",
            suffix: "",
            artifact: "all-release-macos",
            build_type: "Release",
            cc: "/usr/local/opt/llvm/bin/clang",
            cxx: "/usr/local/opt/llvm/bin/clang++",
          }

    steps:
    - uses: actions/checkout@v2

    - name: Uninstall MySQL (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo systemctl stop mysql
        sudo apt purge *mysql* -y

    - name: Install required packages (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt update
        sudo apt install libstdc++-10-dev gcc-10 g++-10 -y
        sudo apt install cmake ninja-build pkg-config -y
        sudo apt install p7zip-full -y
        sudo apt install python3 python3-pip -y
        sudo apt install libssl-dev
        sudo apt install libgdbm-dev -y  # for SASL DB utils
        sudo apt install mariadb-client -y  # to restore DB from dump in tests
        sudo apt install libmariadb-dev libmariadb-dev-compat -y

    - name: Create necessary symlinks (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        version=10
        priority=100

        sudo update-alternatives --install /usr/bin/gcc         gcc         /usr/bin/gcc-${version}         ${priority}
        sudo update-alternatives --install /usr/bin/gcc-ar      gcc-ar      /usr/bin/gcc-ar-${version}      ${priority}
        sudo update-alternatives --install /usr/bin/gcc-nm      gcc-nm      /usr/bin/gcc-nm-${version}      ${priority}
        sudo update-alternatives --install /usr/bin/gcc-ranlib  gcc-ranlib  /usr/bin/gcc-ranlib-${version}  ${priority}
        sudo update-alternatives --install /usr/bin/gcov        gcov        /usr/bin/gcov-${version}        ${priority}
        sudo update-alternatives --install /usr/bin/gcov-dump   gcov-dump   /usr/bin/gcov-dump-${version}   ${priority}
        sudo update-alternatives --install /usr/bin/gcov-tool   gcov-tool   /usr/bin/gcov-tool-${version}   ${priority}
        sudo update-alternatives --install /usr/bin/lto-dump    lto-dump    /usr/bin/lto-dump-${version}    ${priority}
        sudo update-alternatives --install /usr/bin/g++         g++         /usr/bin/g++-${version}         ${priority}

        sudo update-alternatives --install /usr/bin/cc   cc   /usr/bin/gcc-${version} ${priority}
        sudo update-alternatives --install /usr/bin/c++  c++  /usr/bin/g++-${version} ${priority}

    - name: Set environment variables
      shell: python3 {0}
      run: |
        import os

        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))

        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo))
          env_file.write("ROOT_PATH={}\n".format(root))

          if "${{ runner.os }}" == "Linux":
            env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "bin")))
          elif "${{ runner.os }}" == "macOS":
            env_file.write("CMAKE_TOOL_BINARY_PATH={}\n".format(os.path.join(root, cmake_tool_path, "CMake.app", "Contents", "bin")))

    - name: Install required python3 modules
      run: pip3 install requests pyparsing

    - name: Install MariaDB (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install mariadb

    - name: Ninja and CMake cache
      uses: actions/cache@v2
      id: cache_ninja_and_cmake
      with:
        path: |
          ${{ env.ROOT_PATH }}/${{ env.CMAKE_TOOL_PATH }}
          ${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}
        key: ${{ runner.os }}-ninja-${{ env.NINJA_TOOL_VERSION }}-cmake-${{ env.CMAKE_TOOL_VERSION }}

    - name: Download Ninja and CMake
      id: download_ninja_and_cmake
      if: ${{ steps.cache_ninja_and_cmake.outputs.cache-hit != 'true' }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        cmake_version = os.environ['CMAKE_TOOL_VERSION']
        ninja_version = os.environ['NINJA_TOOL_VERSION']
        cmake_tool_path = os.environ['CMAKE_TOOL_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        if "${{ runner.os }}" == "Linux":
          ninja_suffix = "linux.zip"
          cmake_suffix = "Linux-x86_64.tar.gz"
          cmake_dir = "cmake-{}-Linux-x86_64".format(cmake_version)
        elif "${{ runner.os }}" == "macOS":
          ninja_suffix = "mac.zip"
          cmake_suffix = "Darwin-x86_64.tar.gz"
          cmake_dir = "cmake-{}-Darwin-x86_64".format(cmake_version)

        os.mkdir(ninja_tool_path)
        os.chdir(ninja_tool_path)
        ninja_url = "https://github.com/ninja-build/ninja/releases/download/v{}/ninja-{}".format(ninja_version, ninja_suffix)
        open("ninja.zip", "wb").write(requests.get(ninja_url, allow_redirects=True).content)
        execute_command("7z x ninja.zip")
        execute_command("chmod +x ninja")
        os.chdir(root)

        cmake_url = "https://github.com/Kitware/CMake/releases/download/v{}/cmake-{}-{}".format(cmake_version, cmake_version, cmake_suffix)

        open("cmake.tar.gz", "wb").write(requests.get(cmake_url, allow_redirects=True).content)
        execute_command("tar -xf cmake.tar.gz")
        os.rename(cmake_dir, cmake_tool_path)
        execute_command("chmod +x {}/cmake".format(cmake_tool_binary_path))

        os.chdir(repo)

    - name: Boost cache
      uses: actions/cache@v2
      id: cache_boost
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}
        key: ${{ runner.os }}-boost-${{ env.BOOST_MAJOR }}-${{ env.BOOST_MINOR }}-${{ env.BOOST_BUILD }}-all-10

    - name: Boost
      id: boost
      if: ${{ steps.cache_boost.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        boost_major = os.environ['BOOST_MAJOR']
        boost_minor = os.environ['BOOST_MINOR']
        boost_build = os.environ['BOOST_BUILD']

        boost_source_dir  = os.path.normpath(os.path.join(root, "boost_{}_{}_{}".format(boost_major, boost_minor, boost_build)))
        boost_install_dir = os.path.normpath(os.path.join(root, "${{ env.BOOST_INSTALL_PATH }}"))
        os.mkdir(boost_install_dir)

        boost_url = "https://boostorg.jfrog.io/artifactory/main/release/{}.{}.{}/source/boost_{}_{}_{}.tar.bz2".format(boost_major, boost_minor, boost_build,
                                                                                                                       boost_major, boost_minor, boost_build)
        open("boost.tar.bz2", "wb").write(requests.get(boost_url, allow_redirects=True).content)
        execute_command("tar -xf boost.tar.bz2")

        os.chdir(boost_source_dir)

        execute_command("chmod +x ./bootstrap.sh")
        execute_command("chmod +x ./tools/build/src/engine/build.sh")

        toolset = os.path.basename("${{ env.CC }}")
        execute_command('echo "using {} : : ${{ env.CXX }} : ;" > user-config.jam'.format(toolset))
        execute_command("./bootstrap.sh --with-toolset={} --without-libraries=python".format(toolset))
        execute_command('./b2 --ignore-site-config --user-config=./user-config.jam --prefix={} toolset={} variant=release link=shared threading=multi install'.format(boost_install_dir, toolset))

        os.chdir(repo)

    - name: Utils by Pavel A. Lebedev cache
      uses: actions/cache@v2
      id: cache_lebedev_utils_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.THIRD_PARTY_INSTALL_PATH }}
        key: ${{ runner.os }}-lebedev-utils-10

    - name: Utils by Pavel A. Lebedev
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        # ntc-cmake
        cd ${{ env.REPO_PATH }}/cmake/ntc
        mkdir build
        mkdir prefix
        cd build
        ${{ env.CMAKE_TOOL_BINARY_PATH }}/cmake -DCMAKE_INSTALL_PREFIX=`pwd`/../prefix ..
        cmake --build . --target all
        cmake --build . --target install

        # utils and asio-utils from cosec-examples
        cd ${{ env.REPO_PATH }}/3rd-party/lebedev-utils
        mkdir build
        instal_prefix="${{ env.ROOT_PATH }}/${{ env.THIRD_PARTY_INSTALL_PATH }}"
        [ -d $instal_prefix ] && rm -r $instal_prefix
        mkdir $instal_prefix
        cd build
        ${{ env.CMAKE_TOOL_BINARY_PATH }}/cmake \
            -G Ninja \
            -D CMAKE_MAKE_PROGRAM=${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}/ninja \
            -D CMAKE_INSTALL_PREFIX="$instal_prefix" \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH="${{ env.REPO_PATH }}/cmake/ntc/prefix;${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}" \
            -S ..
        cmake --build . --target all
        cmake --build . --target install
        cd ${{ env.REPO_PATH }}

    - name: Cyrus SASL cache
      uses: actions/cache@v2
      id: cache_cyrus_sasl_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }}
        key: ${{ runner.os }}-cyrus-sasl-with-gdbm-${{ env.CYRUS_SASL_VERSION }}-10

    - name: Cyrus SASL
      if: ${{ steps.cache_cyrus_sasl_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        sasl_version = os.environ['CYRUS_SASL_VERSION']

        sasl_source_dir  = os.path.normpath(os.path.join(root, "cyrus-sasl-{}".format(sasl_version)))
        sasl_install_dir = os.path.normpath(os.path.join(root, "${{ env.CYRUS_SASL_INSTALL_PATH }}"))
        os.mkdir(sasl_install_dir)

        sasl_url = "https://github.com/cyrusimap/cyrus-sasl/releases/download/cyrus-sasl-{}/cyrus-sasl-{}.tar.gz".format(sasl_version, sasl_version)
        open("sasl.tar.gz", "wb").write(requests.get(sasl_url, allow_redirects=True).content)
        execute_command("tar -xf sasl.tar.gz")

        os.chdir(sasl_source_dir)

        execute_command("patch -p1 < {}/build-config/patches/cyrus-sasl-2.1.27/gdbm_errno.patch".format(repo))

        execute_command("chmod +x ./configure")
        execute_command("./configure --disable-otp --with-dblib=gdbm --prefix={}".format(sasl_install_dir))
        execute_command("chmod +x ./config/install-sh")
        execute_command("make")
        execute_command("sudo make install")  # MacOS requires sudo to copy files to /Library/Frameworks/
        os.chdir(repo)

    - name: Yaml CPP cache
      uses: actions/cache@v2
      id: cache_yaml_cpp_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.YAML_CPP_INSTALL_PATH }}
        key: ${{ runner.os }}-yaml-cpp-${{ env.YAML_CPP_VERSION }}-10

    - name: Yaml CPP
      if: ${{ steps.cache_yaml_cpp_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        os.chdir(root)

        yaml_version = os.environ['YAML_CPP_VERSION']

        yaml_source_dir  = os.path.normpath(os.path.join(root, "yaml-cpp-yaml-cpp-{}".format(yaml_version)))
        yaml_install_dir = os.path.normpath(os.path.join(root, "${{ env.YAML_CPP_INSTALL_PATH }}"))
        os.mkdir(yaml_install_dir)

        yaml_url = "https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-{}.tar.gz".format(yaml_version)
        open("yaml.tar.gz", "wb").write(requests.get(yaml_url, allow_redirects=True).content)
        execute_command("tar -xf yaml.tar.gz")

        os.chdir(yaml_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} -DYAML_BUILD_SHARED_LIBS=ON "
                        "-DYAML_CPP_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX={} "
                        ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                   os.path.join(root, ninja_tool_path, "ninja"),
                                   yaml_install_dir))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))
        os.chdir(repo)

    - name: SQLPP11 cache
      uses: actions/cache@v2
      id: cache_sqlpp11_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.SQLPP11_INSTALL_PATH }}
        key: ${{ runner.os }}-sqlpp11-${{ env.SQLPP11_VERSION }}-connector-mysql-${{ env.SQLPP11_CONNECTOR_MYSQL_VERSION }}-10

    - name: SQLPP11
      if: ${{ steps.cache_sqlpp11_unix.outputs.cache-hit != 'true' && runner.os != 'macOS' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        # sqlpp11 itself
        os.chdir(root)

        sqlpp11_version = os.environ['SQLPP11_VERSION']
        sqlpp11_source_dir  = os.path.normpath(os.path.join(root, "sqlpp11-{}".format(sqlpp11_version)))
        sqlpp11_install_dir = os.path.normpath(os.path.join(root, "${{ env.SQLPP11_INSTALL_PATH }}"))
        os.mkdir(sqlpp11_install_dir)

        sqlpp11_url = "https://github.com/rbock/sqlpp11/archive/{}.tar.gz".format(sqlpp11_version)
        open("sqlpp11.tar.gz", "wb").write(requests.get(sqlpp11_url, allow_redirects=True).content)
        execute_command("tar -xf sqlpp11.tar.gz")

        os.chdir(sqlpp11_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} -DCMAKE_BUILD_TYPE=Release "
                        "-DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX={} -DCMAKE_PREFIX_PATH={} "
                        ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                   os.path.join(root, ninja_tool_path, "ninja"),
                                   sqlpp11_install_dir,
                                   os.path.join(root, os.environ['BOOST_INSTALL_PATH'])))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))

        # chrono date (sqlpp11 connector mysql dependency)
        os.chdir(root)

        chrono_date_version = os.environ['CHRONO_DATE_VERSION']
        chrono_date_source_dir  = os.path.normpath(os.path.join(root, "date-{}".format(chrono_date_version)))

        chrono_date_url = "https://github.com/HowardHinnant/date/archive/v{}.tar.gz".format(chrono_date_version)
        open("chrono_date.tar.gz", "wb").write(requests.get(chrono_date_url, allow_redirects=True).content)
        execute_command("tar -xf chrono_date.tar.gz")

        os.chdir(chrono_date_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} "
                        "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX={} "
                        ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                   os.path.join(root, ninja_tool_path, "ninja"),
                                   sqlpp11_install_dir))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))

        # sqlpp11 connector mysql
        os.chdir(root)

        sqlpp11_conn_version = os.environ['SQLPP11_CONNECTOR_MYSQL_VERSION']
        sqlpp11_conn_source_dir  = os.path.normpath(os.path.join(root, "sqlpp11-connector-mysql-{}".format(sqlpp11_conn_version)))

        sqlpp11_conn_url = "https://github.com/rbock/sqlpp11-connector-mysql/archive/{}.tar.gz".format(sqlpp11_conn_version)
        open("sqlpp11_conn.tar.gz", "wb").write(requests.get(sqlpp11_conn_url, allow_redirects=True).content)
        execute_command("tar -xf sqlpp11_conn.tar.gz")

        os.chdir(sqlpp11_conn_source_dir)

        execute_command("{} -GNinja -DCMAKE_MAKE_PROGRAM={} "
                        "-DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON "
                        "-DCMAKE_INSTALL_PREFIX={} -DCMAKE_PREFIX_PATH=/usr/local/Cellar/mariadb/10.5.8 "
                        "-DUSE_MARIADB=TRUE -DDATE_INCLUDE_DIR={}/include -DSQLPP11_INCLUDE_DIR={}/include -DENABLE_TESTS=OFF "
                        ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                   os.path.join(root, ninja_tool_path, "ninja"),
                                   sqlpp11_install_dir, sqlpp11_install_dir, sqlpp11_install_dir))
        execute_command("{} --build . --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build . --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))

        os.chdir(repo)

    - name: MsgPack cache
      uses: actions/cache@v2
      id: cache_msgpack_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.MSGPACK_INSTALL_PATH }}
        key: ${{ runner.os }}-msgpack-${{ env.MSGPACK_VERSION }}-8

    - name: MsgPack
      if: ${{ steps.cache_msgpack_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        os.chdir(root)

        msgpack_version = os.environ['MSGPACK_VERSION']

        msgpack_source_dir  = os.path.normpath(os.path.join(root, "msgpack-{}".format(msgpack_version)))
        msgpack_install_dir = os.path.normpath(os.path.join(root, "${{ env.MSGPACK_INSTALL_PATH }}"))
        os.mkdir(msgpack_install_dir)

        msgpack_url = "https://github.com/msgpack/msgpack-c/releases/download/cpp-{}/msgpack-{}.tar.gz".format(msgpack_version, msgpack_version)
        open("msgpack.tar.gz", "wb").write(requests.get(msgpack_url, allow_redirects=True).content)
        execute_command("tar -xf msgpack.tar.gz")

        os.chdir(msgpack_source_dir)

        execute_command("patch -p1 < {}/build-config/patches/msgpack-3.3.0/struct_iovec.patch".format(repo))

        execute_command("{} -B build -DCMAKE_BUILD_TYPE=Release -GNinja -DCMAKE_MAKE_PROGRAM={} -DCMAKE_INSTALL_PREFIX={} "
                        "-DMSGPACK_CXX17=ON -DMSGPACK_BUILD_TESTS=OFF -DMSGPACK_BUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DMSGPACK_ENABLE_STATIC=OFF "
                        ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                   os.path.join(root, ninja_tool_path, "ninja"),
                                   msgpack_install_dir))
        execute_command("{} --build build --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build build --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))
        os.chdir(repo)

    - name: Catch2 cache
      uses: actions/cache@v2
      id: cache_catch2_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.CATCH2_INSTALL_PATH }}
        key: ${{ runner.os }}-catch2-${{ env.CATCH2_VERSION }}-10

    - name: Catch2
      if: ${{ steps.cache_catch2_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']
        ninja_tool_path = os.environ['NINJA_TOOL_PATH']
        cmake_tool_binary_path = os.environ['CMAKE_TOOL_BINARY_PATH']

        os.chdir(root)

        catch2_version = os.environ['CATCH2_VERSION']

        catch2_source_dir  = os.path.normpath(os.path.join(root, "Catch2-{}".format(catch2_version)))
        catch2_install_dir = os.path.normpath(os.path.join(root, "${{ env.CATCH2_INSTALL_PATH }}"))
        os.mkdir(catch2_install_dir)

        catch2_url = "https://github.com/catchorg/Catch2/archive/v{}.tar.gz".format(catch2_version)
        open("catch2.tar.gz", "wb").write(requests.get(catch2_url, allow_redirects=True).content)
        execute_command("tar -xf catch2.tar.gz")

        os.chdir(catch2_source_dir)

        execute_command("{} -B build -DBUILD_TESTING=OFF -GNinja -DCMAKE_MAKE_PROGRAM={} -DCMAKE_INSTALL_PREFIX={}  "
                        ".".format(os.path.join(cmake_tool_binary_path, "cmake"),
                                   os.path.join(root, ninja_tool_path, "ninja"),
                                   catch2_install_dir))
        execute_command("{} --build build --target all".format(os.path.join(cmake_tool_binary_path, "cmake")))
        execute_command("{} --build build --target install".format(os.path.join(cmake_tool_binary_path, "cmake")))
        os.chdir(repo)

    - name: Qt5 cache
      uses: actions/cache@v2
      id: cache_qt_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.QT_INSTALL_PATH }}
        key: ${{ runner.os }}-qt-qtbase-qttools-${{ env.QT_VERSION }}-10

    - name: Qt5
      if: ${{ steps.cache_qt_unix.outputs.cache-hit != 'true' }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      shell: python3 {0}
      run: |
        import os
        import requests
        import subprocess

        def execute_command(cmd):
          ret = subprocess.call(cmd, shell=True)
          if ret != 0:
            raise RuntimeError('Exit code {} while executing "{}"'.format(ret, cmd))

        root = os.environ['ROOT_PATH']
        repo = os.environ['REPO_PATH']

        os.chdir(root)

        qt_install_dir = os.path.normpath(os.path.join(root, "${{ env.QT_INSTALL_PATH }}"))
        os.mkdir(qt_install_dir)

        qt_short_version = os.environ['QT_SHORT_VERSION']
        qt_version = os.environ['QT_VERSION']

        qtbase_source_dir  = os.path.normpath(os.path.join(root, "qtbase-everywhere-src-{}".format(qt_version)))
        qtbase_url = "http://download.qt.io/official_releases/qt/{}/{}/submodules/qtbase-everywhere-src-{}.tar.xz".format(qt_short_version, qt_version, qt_version)
        open("qtbase.tar.xz", "wb").write(requests.get(qtbase_url, allow_redirects=True).content)
        execute_command("tar -xf qtbase.tar.xz")

        os.chdir(qtbase_source_dir)

        qt_params = ''
        if '${{ runner.os }}' == 'Linux':
            qt_params = '-platform linux-g++'
        elif '${{ runner.os }}' == 'macOS':
            qt_params = '-platform macx-clang'

        execute_command("chmod +x ./configure")
        execute_command("./configure -opensource -confirm-license -prefix {} {} -no-opengl -nomake examples -nomake tests".format(qt_install_dir, qt_params))
        execute_command("make")
        execute_command("make install")

        os.chdir(root)

        qttools_source_dir  = os.path.normpath(os.path.join(root, "qttools-everywhere-src-{}".format(qt_version)))
        qttools_url = "http://download.qt.io/official_releases/qt/{}/{}/submodules/qttools-everywhere-src-{}.tar.xz".format(qt_short_version, qt_version, qt_version)
        open("qttools.tar.xz", "wb").write(requests.get(qttools_url, allow_redirects=True).content)
        execute_command("tar -xf qttools.tar.xz")

        os.chdir(qttools_source_dir)

        execute_command("{}/bin/qmake qttools.pro".format(qt_install_dir))
        execute_command("make -j2")
        execute_command("make install")

        os.chdir(repo)

    - name: Configure
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        ${{ env.CMAKE_TOOL_BINARY_PATH }}/cmake \
        -G Ninja \
        -D CMAKE_MAKE_PROGRAM=${{ env.ROOT_PATH }}/${{ env.NINJA_TOOL_PATH }}/ninja \
        -S . \
        -B build \
        -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
        -D CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
        -D CMAKE_PREFIX_PATH=\
        "${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.YAML_CPP_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.SQLPP11_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.MSGPACK_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.CATCH2_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.QT_INSTALL_PATH }};\
        ${{ env.ROOT_PATH }}/${{ env.THIRD_PARTY_INSTALL_PATH }}" \
        -D CMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Initialize CodeQL
      if: ${{ matrix.config.suffix == 'CodeQL' }}
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Build
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: cmake --build build --target all

    - name: Perform CodeQL Analysis
      if: ${{ matrix.config.suffix == 'CodeQL' }}
      uses: github/codeql-action/analyze@v1

    - name: Install Strip
      run: cmake --install build --prefix install --strip

    - name: Mac Deploy Qt
      if: ${{ runner.os == 'macOS' }}
      shell: sh {0}
      run: |
        ${{ env.ROOT_PATH }}/${{ env.QT_INSTALL_PATH }}/bin/macdeployqt install/bin/melon-client-desktop.app

    - name: Copy required dylibs
      if: ${{ runner.os == 'macOS' }}
      shell: sh {0}
      run: |
        cp ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }}/lib/libsasl2.3.dylib install/bin/libsasl2.3.dylib
        install_name_tool -change ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }}/lib/libsasl2.3.dylib @executable_path/libsasl2.3.dylib install/bin/melon-auth

    - name: Tar files
      run: tar -cvf install.tar ./install

    - name: Upload binaries
      if: ${{ matrix.config.artifact != '' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./install.tar
        name: ${{ matrix.config.artifact }}

    - name: Prepare to run static analysis
      if: ${{ matrix.config.suffix == 'PVS-Studio' || matrix.config.suffix == 'clang-tidy' }}
      run: mkdir reports

    - name: Install clang-tidy
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      run: |
        sudo apt install clang-tidy-11 -y
        sudo update-alternatives --install /usr/bin/clang-tidy      clang-tidy      /usr/bin/clang-tidy-11     100
        sudo update-alternatives --install /usr/bin/run-clang-tidy  run-clang-tidy  /usr/bin/run-clang-tidy-11 100

    - name: Run clang-tidy
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      run: run-clang-tidy -p=build -j=2 2>&1 | tee reports/clang-tidy-report.log

    - name: Install PVS-Studio
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      shell: sh {0}
      run: |
        wget -q -O - https://files.viva64.com/etc/pubkey.txt | sudo apt-key add -
        sudo wget -O /etc/apt/sources.list.d/viva64.list https://files.viva64.com/etc/viva64.list
        sudo apt-get update
        sudo apt-get install pvs-studio

    - name: Run PVS-Studio
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      env:
        PVS_NAME: ${{ secrets.PVS_NAME }}
        PVS_KEY: ${{ secrets.PVS_KEY }}
      shell: sh {0}
      run: |
        pvs-studio-analyzer credentials $PVS_NAME $PVS_KEY
        pvs-studio-analyzer analyze -e *melon/build/src* -j2 -f build/compile_commands.json
        plog-converter -t fullhtml -o reports/pvs-report -a GA:1,2,3 PVS-Studio.log

    - name: Upload static analysis results
      if: ${{ matrix.config.suffix == 'PVS-Studio' || matrix.config.suffix == 'clang-tidy' }}
      uses: actions/upload-artifact@v2
      with:
        path: ./reports
        name: static-analyzer-reports

    - name: Fail if clang-tidy found warnings
      if: ${{ matrix.config.suffix == 'clang-tidy' }}
      shell: sh {0}
      run: |
        cat reports/clang-tidy-report.log | grep -E 'warning: |error: ' | grep -v 'melon/build/src\|autogen\|-fcoroutines'; status=$?; test $status -ne 0

    - name: Fail if PVS-Studio found warnings
      if: ${{ matrix.config.suffix == 'PVS-Studio' }}
      shell: sh {0}
      run: |
        plog-converter -t tasklist -a GA:1,2,3 -w PVS-Studio.log

  run-tests:
    needs: build-core-server-client-desktop
    name: ${{ format('{0} {1} tests', matrix.config.prefix, matrix.config.build_type) }}
    runs-on: ${{ matrix.config.os }}
    env:
      BOOST_MAJOR: 1
      BOOST_MINOR: 76
      BOOST_BUILD: 0
      BOOST_INSTALL_PATH: "boost-install"
      THIRD_PARTY_INSTALL_PATH: "3rd-party-install"
      CYRUS_SASL_VERSION: "2.1.27"
      CYRUS_SASL_INSTALL_PATH: "cyrus-sasl-install"
      YAML_CPP_VERSION: "0.6.3"
      YAML_CPP_INSTALL_PATH: "yaml-cpp-install"
      SQLPP11_VERSION: "0.60"
      SQLPP11_CONNECTOR_MYSQL_VERSION: "0.29"
      SQLPP11_INSTALL_PATH: "sqlpp11-install"
      CATCH2_VERSION: "2.13.4"
      CATCH2_INSTALL_PATH: "catch2-install"
      QT_VERSION: "5.15.1"
      QT_INSTALL_PATH: "qt-install"
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: melon
          MYSQL_PASSWORD: melonpass
          MYSQL_ROOT_PASSWORD: melonpass
          MYSQL_DATABASE: melon
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=5
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            os: "ubuntu-latest",
            prefix: "Linux",
            artifact: "all-release-linux",
            build_type: "Release",
          }
        - {
            os: "ubuntu-latest",
            prefix: "Linux",
            artifact: "all-debug-linux",
            build_type: "Debug",
          }

    steps:
    - uses: actions/checkout@v2

    - name: Set environment variables
      shell: python3 {0}
      run: |
        import os

        repo = os.path.normpath(os.environ['GITHUB_WORKSPACE'])
        root = os.path.normpath(os.path.dirname(repo))

        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
          env_file.write("REPO_PATH={}\n".format(repo))
          env_file.write("ROOT_PATH={}\n".format(root))

    - name: Uninstall MySQL (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo systemctl stop mysql
        sudo apt purge *mysql* -y

    - name: Install required packages (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt update
        sudo apt install libstdc++-10-dev
        sudo apt install mariadb-client -y  # to restore DB from dump in tests
        sudo apt install libmariadb3 -y
        sudo apt install libgdbm6 -y
        sudo apt install libssl1.1 -y

    - name: Boost cache
      uses: actions/cache@v2
      id: cache_boost
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}
        key: ${{ runner.os }}-boost-${{ env.BOOST_MAJOR }}-${{ env.BOOST_MINOR }}-${{ env.BOOST_BUILD }}-all-10

    - name: Utils by Pavel A. Lebedev cache
      uses: actions/cache@v2
      id: cache_lebedev_utils_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.THIRD_PARTY_INSTALL_PATH }}
        key: ${{ runner.os }}-lebedev-utils-10

    - name: Cyrus SASL cache
      uses: actions/cache@v2
      id: cache_cyrus_sasl_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }}
        key: ${{ runner.os }}-cyrus-sasl-with-gdbm-${{ env.CYRUS_SASL_VERSION }}-10

    - name: Yaml CPP cache
      uses: actions/cache@v2
      id: cache_yaml_cpp_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.YAML_CPP_INSTALL_PATH }}
        key: ${{ runner.os }}-yaml-cpp-${{ env.YAML_CPP_VERSION }}-10

    - name: SQLPP11 cache
      uses: actions/cache@v2
      id: cache_sqlpp11_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.SQLPP11_INSTALL_PATH }}
        key: ${{ runner.os }}-sqlpp11-${{ env.SQLPP11_VERSION }}-connector-mysql-${{ env.SQLPP11_CONNECTOR_MYSQL_VERSION }}-10

    - name: Catch2 cache
      uses: actions/cache@v2
      id: cache_catch2_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.CATCH2_INSTALL_PATH }}
        key: ${{ runner.os }}-catch2-${{ env.CATCH2_VERSION }}-10

    - name: Qt5 cache
      uses: actions/cache@v2
      id: cache_qt_unix
      with:
        path: ${{ env.ROOT_PATH }}/${{ env.QT_INSTALL_PATH }}
        key: ${{ runner.os }}-qt-qtbase-qttools-${{ env.QT_VERSION }}-10

    - name: Download pre-built binaries from artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}

    - name: Untar files
      run: |
        tar -xf install.tar

    - name: Run tests
      env:
        DB_USER: melon
        DB_PASSWORD: melonpass
        DB_DATABASE: melon
        DB_HOST: "127.0.0.1"
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
      run: |
        cd install

        # storage tests
        mysql --host=${{ env.DB_HOST }} --port=${{ env.DB_PORT }} --user=${{ env.DB_USER }} --password=${{ env.DB_PASSWORD }} --database=${{ env.DB_DATABASE }} < ${{ env.REPO_PATH }}/src/server/storage/sql/db_scheme_dump.sql
        LD_LIBRARY_PATH=${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}/lib ./bin/melon-storage-tests

        # auth tests
        PATH_BEFORE=$PATH
        PATH=${{ env.ROOT_PATH }}/${{ env.CYRUS_SASL_INSTALL_PATH }}/sbin:$PATH_BEFORE

        ${{ env.REPO_PATH }}/src/server/auth/scripts/setupserver.sh
        chmod 0777 ~/.melon/melon.conf
        chmod 0777 ~/.melon/sasldb2

        LD_LIBRARY_PATH=${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}/lib ./bin/melon-auth 6666 &
        MELON_AUTH_PID=$!
        sleep 1  # ensure that server has started

        LD_LIBRARY_PATH=${{ env.ROOT_PATH }}/${{ env.BOOST_INSTALL_PATH }}/lib ./bin/melon-auth-test-client

        kill -2 $MELON_AUTH_PID
        PATH=$PATH_BEFORE

        cd ..
